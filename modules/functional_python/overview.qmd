---
title: Functional Python
---
![](../../images/decorative_cloth.png)

:::{.callout-note appearance="minimal"}
Elegance is not about being noticed, itâ€™s about being remembered.

\- Giorgio Armani
:::

# Functional Programming

Functional programming has a lot of different definitions. In a pure sense, it means abstractions
have certain mathematical behaviors and guarantees. In a pragmatic, python-centric perspective, 
however, functional programming can be thought of as a collections of ideas and features.
Many of these features are incredibly powerful and expressive, and found in many open-source
libraries. Functional approaches also tend to be more scalable, a benefit to scientific computing.

One of python's most powerful, and prevalent, *functional* features is decorators. They are often
used to mark or modify  functions or classes in some simple, and *hopefully*, easy to remember way. 
However, despite looking simple, there  is actually a lot going on behind the scenes. Because they
are so common and powerful, decorators are certainly  worth understanding.

# Outline

This module covers:

1. Functional concept overview
2. Callables as arguments, closures and scope
3. Decorators
4. Anonymous functions
5. Map, reduce

# Reading

 - [Functional Python Programming](https://realpython.com/python-functional-programming/)

# Additional Resources

 - [A Primer on Decorators](https://realpython.com/primer-on-python-decorators/)
 - [Python Closures](https://www.programiz.com/python-programming/closure)
 - [Python Tips: Decorators](https://book.pythontips.com/en/latest/decorators.html)