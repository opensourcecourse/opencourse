---
title: "Functional Python"
subtitle: Functionally Educational
format:
    revealjs:
        slide-number: true
        preview-links: auto
        theme: [../../custom_slides.scss]
        css: ../../slides.css
        navigation-mode: vertical
        controls-layout: bottom-right
        controls-tutorial: true

footer: \
    <a href="https://opensourcecourse.dev/modules/functional_python/overview.html">overview</a> /\
    <a href="https://github.com/opensourcecourse/opencourse/blob/main/modules/functional_python/slides.qmd">source</a> /\
    <a href="https://opensourcecourse.dev/modules/functional_python/exercises.html">exercises</a>
---

# Functional Concepts

:::{.incremental}
- Pure functions, immutability, side effects
- Functions as parameters
- Decorators
- Anonymous functions
- Generators
- Context managers
- Map, reduce
- Recursion
:::



# Functional Purity {auto-animate="true"}

Define three vector functions

:::{.fragment}

$$
f(a, \vec{x}, \vec{y}) = a \vec{x} + \vec{y}
$$

:::

:::{.fragment}

$$
g(\vec{x}, \vec{y}) = \vec{x} \oslash \vec{y}
$$

:::

:::{.fragment}

$$
h(a, \vec{x}) = \vec{x}^{\circ a}
$$

:::



# Functional Purity {auto-animate="true"}

Does the meaning change with order?

$$
f(a, \vec{x}, \vec{y}) = a \vec{x} + \vec{y}
$$

$$
g(\vec{x}, \vec{y}) = \vec{x} \oslash \vec{y}
$$

$$
h(a, \vec{x}) = \vec{x}^{\circ a}
$$



# Functional Purity {auto-animate="true"}

Does the meaning change with order?

$$
g(\vec{x}, \vec{y}) = \vec{x} \oslash \vec{y}
$$

$$
h(a, \vec{x}) = \vec{x}^{\circ a}
$$

$$
f(a, \vec{x}, \vec{y}) = a \vec{x} + \vec{y}
$$


# Functional Purity {auto-animate="true"}

Does the meaning change with order?

$$
h(a, \vec{x}) = \vec{x}^{\circ a}
$$

$$
f(a, \vec{x}, \vec{y}) = a \vec{x} + \vec{y}
$$

$$
g(\vec{x}, \vec{y}) = \vec{x} \oslash \vec{y}
$$



# Functional Purity {auto-animate="true"}

Does the meaning change with order?

$$
h(a, \vec{x}) = \vec{x}^{\circ a}
$$

$$
g(\vec{x}, \vec{y}) = \vec{x} \oslash \vec{y}
$$

$$
f(a, \vec{x}, \vec{y}) = a \vec{x} + \vec{y}
$$


# Functional Purity {auto-animate="true"}

<br>

```{.python filename="functions"}
def func_f(a, x, y):
    ...

def func_g(x, y):
    ...

def func_h(a, x):
    ...
```


# Functional Purity {auto-animate="true"}

<br>

```{.python filename="inputs"}
import numpy as np

x = np.random.random(10)
y = np.ones_like(x)
a = 12
```


# Functional Purity {auto-animate="true"}

<br>

```{.python filename="Order"}
f_1 = func_f(a, x, y)
g_1 = func_g(x, y)
h_1 = func_h(a, x)

h_2 = func_h(a, x)
g_2 = func_g(x, y)
f_2 = func_f(a, x, y)
```

:::{.fragment}

Do $f_1$ = $f_2$, $g_1$ = $g_2$, $h_1$ = $h_2$ ? 

:::

:::{.fragment}

It depends on [functional purity]{.red-bold} 

:::



# Functional Purity {auto-animate="true"}


```{.python filename="pure functions"}
def func_f(a, x, y):
    out = a * x + y
    return out

def func_g(x, y):
    out = x / y
    return out

def func_h(a, x):
    out = x ** a
    return out
```


# Functional Purity {auto-animate="true"}


```{.python filename="impure functions"}
def func_f(a, x, y):
    x[:] = a * x + y
    return x

def func_g(x, y):
    x[:] = x / y
    return x

def func_h(a, x):
    x[:] = x ** a
    return x
```


# Functional Purity

<br>

```{.python}
global_state = {'value': 1}

def impure_add(a):
    return a + global_state['value']

def pure_add(a):
    return a + 1
```


# Functional Purity {auto-animate="true"}

<br>

:::{.incremental}
- Both pure and impure functions can be **correct**
- Pure functions behave in a mathematically predictable way
- Impure functions cause [side effects]{.red-bold}
- Pure functions are much easier to parallelize
- Restricted use of features
:::




# Immutability

<br>

```{.python code-line-numbers="|1-2|4|5"}
list_1 = [1, 2, 3]
tuple_1 = (1, 2, 3)

list_1[0] = 0  # sure, why not?
tuple_1[0] = 0  # no way!
```

<br>

:::{.fragment}
Why would we limit ourselves as developers?
:::


# Immutability

<br>

:::{.incremental}
- Objects cannot change once created
- Side effects related to data are eliminated
- Memory location no longer matters
- New objects are created by functions
- Immutable built-ins: tuple, str, frozenset
- Prefer immutable data, pure functions until otherwise needed
:::


# Functions as Parameters

<br>

Functions, or any object, can be passed as a parameter to a callable. 

```python
def func1():
    print('func1 called')

def func2(func):
    return func()

func2(func1)
```



# Scope

<br>

Scope: the order in which python "sees" names and values (LEGB):

:::{.incremental}
Local — callables own indent level

Enclosing-function — callable containing callable

Global (module) — top-level or module names

Built-in (Python) — python names (open, list, set, ValueError, ...)
:::

::: footer
See [here](https://realpython.com/python-scope-legb-rule/) for an excellent overview of scope.
:::



# Scope{auto-animate="true"}

```python
arg = 0

def func_1():
    arg = 1
    
    def func_2():
        arg = 2
        print(arg)
    
    return func_2()

func_1()
```

:::{.fragment}
prints: 2
:::



# Scope{auto-animate="true"}

```python
arg = 0

def func_1():
    arg = 1
    
    def func_2():
        print(arg)
    
    return func_2()

func_1()
```

:::{.fragment}
prints: 1
:::



# Scope{auto-animate="true"}

```python
arg = 0

def func_1():
    
    def func_2():
        print(arg)
    
    return func_2()

func_1()
```

:::{.fragment}
prints: 0
:::


# Scope{auto-animate="true"}

```python
some_arg = 1

def func1():
    print(some_arg)

def func2(func):
    some_arg = 2
    func()

func1()
func2(func1)
```
:::{.fragment}
prints: 1, Why!?
:::



# Scope{auto-animate="true"}

```python
arg = 0

def func_1():
    arg = 1
    
    def func_2():
        global arg
        print(arg)
    
    return func_2()

func_1()
```

:::{.fragment}
prints: 0, why?
:::



# Scope{auto-animate="true"}

```python
arg = 0

def func_1():
    arg = 1
    
    def func_2():
        nonlocal arg
        print(arg)
    
    return func_2()

func_1()
```

:::{.fragment}
prints: 1, why?
:::


:::{.fragment}
The function *definition* determines scope, not its use.
:::



## Scope{auto-animate="true"}

<br>

:::{.callout-note}
most of the time, using `global` or `nonlocal` is not a good idea.
:::



# Decorators (finally){auto-animate="true"}
Decorators are a function that take other function.

```python
def decorator(func):
    def _wrapper(arg1, arg2):
        new_arg1 = arg1 + 1
        new_arg2 = arg2 + 1
        return func(new_arg1, new_arg2)
    return _wrapper

def add(arg1, arg2):
    return arg1 + arg2

decorated = decorator(add)
print(decorated(1, 1))
```



# Decorators {auto-animate="true"}
@ is used as syntactic sugar.

```python
def decorator(func):
    def _wrapper(arg1, arg2):
        new_arg1 = arg1 + 1
        new_arg2 = arg2 + 1
        return func(new_arg1, new_arg2)
    return _wrapper

@decorator
def add(arg1, arg2):
    return arg1 + arg2

add(1, 1)
```



# Decorators {auto-animate="true"}
Decorators don't need to replace the old function

```python
registery = []

def decorator(func):
    registery.append(func)
    return func

@decorator
def add(arg1, arg2):
    return arg1 + arg2

print(add(1, 1), len(registery))
```



# Decorators {auto-animate="true"}
But when they do, they should use "wrap" to transfer metedata.

```python
from functools import wraps

def decorator(func):
    @wraps(func)
    def _wrapper(arg1, arg2):
        new_arg1 = arg1 + 1
        new_arg2 = arg2 + 1
        return func(new_arg1, new_arg2)
    return _wrapper
```



# Decorators in the Wild

<br>

functools cache

```python
from functools import cache

@cache
def fibonacci(n):
   if n <= 1:
       return n
   fib1 = fibonacci(n-1)
   fib2 = fibonacci(n-2)
   return fib1 + fib2
```



# Decorators in the Wild

<br>

functools partial

```{python}
#| echo: true
from functools import partial

def add(a, b):
    return a + b

partial_add = partial(add, b=2)

print(partial_add(1))
```



# Decorators in the Wild

<br>

Pytest

```python
import pytest

@pytest.fixture()
def setup_data():
    return [1, 2, 3]

def test_data(setup_data):
    assert len(setup_data)
```



# Decorators in the Wild

<br>

Flask

```python
from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello, World!'
```



# Decorators Summary

<br>
Decorators:

:::{.incremental}
- Are functions which take other functions as inputs
- Can use the @ as shorthand for `decorator(func)`
- May return a new function (appears to modify original)
- Semantically mark a function
:::



# Anonymous Functions

:::{.r-stack}
![](https://ih1.redbubble.net/image.789708875.3643/poster,504x498,f8f8f8-pad,600x600,f8f8f8.u4.jpg)
:::



# Anonymous Functions

<br>
Functions with no name

```{.python code-line-numbers="|6" auto-animate="true"}
my_list = [1, 3, 2]
other_map = {1: 10, 2: 0, 3: 99}

sort_list = sorted(
    my_list, 
    key=lambda x: other_map[x]
)
```



# Anonymous Functions

<br>

Lambda def equivalence

```
# never give a lambda a name
func1 = lambda x, y, z: x + y + z

# use a def instead
def func1(x, y, z):
    return x + y + z 
```



# Map

<br>

Apply a function to each element of a sequence

```{python}
#| echo: true
my_range = range(10)

# square the list
out = map(lambda x: x*x, my_range)

print(list(out))
```



# Reduce


Apply a function to first two elements, then the result to the third, etc.


```{python}
#| echo: true
from functools import reduce
my_range = range(1, 6)

# square the list
out = reduce(lambda x,y: x*y, my_range)

print(out)
```

::: footer
Haskel calls reduce "fold" which is a more descriptive name.
See [Real Python's article](https://realpython.com/python-reduce-function/) for more on reduce.
:::



# Recursion

<br>
When a function calls into itself. Has a base case and at least one recursive case.


```{.python code-line-numbers="|3|4,5"}
def fibonacci(n):
   if n <= 1:
       return n
   fib1 = fibonacci(n-1)
   fib2 = fibonacci(n-2)
   return fib1 + fib2
```



# Recursion

<br>

Recursion:

:::{.incremental}
- Works well for parsing recursive data structures (eg trees)
- Easy to overflow the stack
- Works well for showing off
- Can be difficult to understand
- Should be used sparingly
:::

