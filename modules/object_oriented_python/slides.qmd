---
title: "Object Oriented Python"
subtitle: OO programming with python
format:
    revealjs:
        slide-number: true
        preview-links: auto
        theme: [../../custom_slides.scss]
        css: ../../slides.css
        navigation-mode: vertical
        controls-layout: bottom-right
        controls-tutorial: true
footer: \
    <a href="https://opensourcecourse.dev/modules/object_oriented_python/overview.html">overview</a> /\
    <a href="https://github.com/opensourcecourse/opencourse/blob/main/modules/object_oriented_python/slides.qmd">source</a> /\
    <a href="https://opensourcecourse.dev/modules/object_oriented_python/exercises.html">exercises</a>
---

# Intro

<br>

What is object oriented programming anyway?

::: {.incremental}
* An abstraction with Data (attributes) and behavior (methods)
* Data model may fit real-world
* Extensibility through inheritance
:::



# Intro

<br>

:::{.callout-warning}
Object Orientied is not synonymous with "better"
:::


# Intro

<br>

```python
class Dog:
    def __init__(self, name):
        self.name = name  # data
    
    def say_hello(self):  # behavior
        print(self.name) 

        
fido = Dog('fido')
fido.say_hello()
```



# Knowledge Check

<br>

```python
rover = Dog('rover')

rover.say_hello()  # what does this print?
```



# Intro

:::: {.columns}

::: {.column width="50%"}
Possible [Advantages]{.blue}

::: {.incremental}
- Expressive (inuitive interfaces)
- Modularity (inheretence)
- Common Paradigm (java/c++)
:::

:::

::: {.column width="50%"}

Possible [Disadvantages]{.red}

::: {.incremental}
- Expressive (sometimes too much freedom)
- Shared State (who changed what and when?)
- Slower Execution (objects vs arrays)
:::

:::

::::

:::{.fragment}
Others?
:::

# Nomenclature

<br>

::: {.incremental}

- class - the definition (blank form)  
- instance - the filled in data (filled in form)
- self - conventional name for instance
- attribute - data accessed via getattr (object.name)
- method - class functions (starts with self)

:::



# Knowledge Check {auto-animate="true"}
<br>

```{.python}
class Customer:
    name = None
    
    def __init__(self, name):
        self.name = name
        self.balance = 0
        
    def withdraw(self, amount):
        self.balance -= amount
```



# Knowledge Check {auto-animate="true"}

<br>

```{.python code-line-numbers="1|2|3|4"}
bob = Customer('bob')  # What is bob?  
cust = Customer  # what is cust?
bob.balance  # what is balance (value and thing)
bob.withdraw  # what is withdraw? 
```



# Dunders

<br>

Dunders: things with double leading and trailing underscores. 
These are part of the python language.



# Dunders: Examples

<br>

```python
if __name__ == "__main__":
    ...
```



# Dunders: Examples

<br>

```python
class Customer:
    def __init__(self, name):
        self.name = name
        self.balance = 0
```



# Dunders: Examples

<br>

```python
class Customer:
    def __add__(self, object_2):
        ...
```



# Dunders: Operator overloading


:::: {.columns}

::: {.column width="50%"}

- \__add__\  (+)
- \__sub__\  (-)
- \__mul__\  (*)
- \__truediv__\  (/)
- \__floordiv__\  (//)
- \__pow__\  (**)
- \__rshift__\  (>>)
- \__lshift__\  (<<)


:::

::: {.column width="50%"}
- \__or__\  (|)
- \__eq__\ (==)
- \__ne__\ (!=)
- \__gt__\  (>)
- \__lt__\  (<)
- \__neg__\ (-)
- \__pos__\ (+)
- \__invert__\ (~)
:::

::::


# Dunders: Operator overloading

```{python}
#| echo: True
class FunkyString:
    def __init__(self, starting_string):
        self._data = starting_string

    def __rshift__(self, num):
        return ' '*num + self._data

fs = FunkyString('bob')
print(fs >> 3)
print(fs >> 6)
print(fs >> 9)
```


# Inheritance 

<br>

- Inheritance is used to extend or modify classes

- MRO defines lookups (instance) -> (class) -> (parent)



## Inheritance 

You can check the MRO via the `__MRO__` dunder class attribute.

<br>

```{python}
#| echo: true
import pandas as pd

print(pd.DataFrame.__mro__)
```



# Inheritance 

```{.python code-line-numbers="|11|12|13"}
class Parent:
    value_1 = 0
    
class Child(Parent):
    value_2 = 1    
    
    def __init__(self):
        self.value_1 = 2

child = Child()
print(child.value_1)
print(child.value_2)
print(Child.value_1)
```



# isinstance and issubclass

Checking class relations is done with `isinstance` and `issubclass`
```{.python code-line-numbers="|7|8|9|10|11|12"}
class Parent():
    pass

class Child(Parent):
    pass

child = Child()
isinstance(child, Child)
isinstance(child, Parent)
isinstance(Child, Parent)
issubclass(Child, Parent)
issubclass(child, Parent)
```



# Protocols

<br>

Protocols (sometimes called interfaces):

    - indicate objects are compatible in some way
    - dunders often used to *implement* protocols
    - any number of protocols are possible


# Protocols

Common Protocols (most found in types or typing module):

    - Sequence
    - Mapping
    - Collection
    - Hashable
    - Reversible
    - Sized
    - Iterable
    - ...



# Protocols

Create a class which implements the Hashable protocol
```{python}
#| echo: true

class MyHashableClass:
    def __init__(self, seed: int):
        self.seed = seed
    
    def __hash__(self):
        return hash(self.seed)

my_instance = MyHashableClass(42)

# my instance is a valid key in a dictionary
my_dict = {my_instance: 42}
```


# Protocols

Create a class which implements the Callable protocol
```{python}
#| echo: true

class MyCallableClass:
    secret_number = 42
    
    def __call__(self, arg1, arg2):
        return self.secret_number + arg1 + arg2

my_instance = MyCallableClass()

# now instances are callable
my_instance(-1, 1)
```



# Protocols

<br>
Defining protocols

    - ABC module and typing.Protocol define protocols
    - Protocol specifies required methods and their signatures
    - ABCs use inheretence (or registering virtual children)
    - typing.Protocol is based on structure not inheritance, often used for static type checking

::: footer
[This](https://jellis18.github.io/post/2022-01-11-abc-vs-protocol/) is a great article on the difference between ABC and
typing.Protocol. See [ABC module](https://docs.python.org/3/library/abc.html) and 
[typing.Protocol](https://peps.python.org/pep-0544/) docs for more details.
:::



# Protocols

ABC example
```{python}
#| echo: true
import abc

class DeckABC(abc.ABC):
    """An ABC for a deck of cards."""
    @abc.abstractmethod
    def shuffle(self):
        ...
    
    @abc.abstractmethod
    def draw(self):
        ...
```



## Protocols

ABC use
```{python}
#| echo: true
from random import choice, sample

class MyDeck(DeckABC):
    """A deck with cards 1-10"""
    def __init__(self, cards=None):
        if cards is None:
            cards = list(range(1,11))
        self.cards = cards
    
    def shuffle(self):
        cards = sample(self.cards, len(self.cards))
        return MyDeck(cards)
    
    def draw(self):
        card = choice(self.cards)
        self.cards.pop(card)
        return card
        
mydeck = MyDeck()
```


# Protocols

typing.Protocol example
```{python}
#| echo: true
from typing import Protocol, runtime_checkable, Self

@runtime_checkable
class DeckProtocol(Protocol):
    """An ABC for a deck of cards."""
    def shuffle(self) -> Self:
        ...
    
    def draw(self) -> str:
        ...
```



## Protocols

typing.Protocol use
```{python}
#| echo: true
from typing import Self
from random import choice, sample

class MyDeck:
    """A deck with cards 1-10"""
    def __init__(self, cards=None):
        if cards is None:
            cards = list(range(1,11))
        self.cards = cards
    
    def shuffle(self) -> Self:
        cards = sample(self.cards, len(self.cards))
        return MyDeck(cards)
    
    def draw(self) -> str:
        card = choice(self.cards)
        self.cards.pop(card)
        return card

deck = MyDeck()
assert isinstance(deck, DeckProtocol)
```



# OO Design: Good Examples 

<br>

A few well-loved python classes:

:::{.incremental}
- pathlib.Path
- pandas.DataFrame
- scikitlearn (Estimator, Predictor, Transformer, Model)
- pydantic.BaseModel
:::



# OO Design: Good Examples 

<br>

before pathlib
```python 
import os

data_path = '/home/user/data'

data_file = os.path.join(data_path, 'the_facts.csv')
```



## OO Design: Good Examples 

<br>

With pathlib
```python 
from pathlib import Path

data_path = Path('/home/user/data')  # / will now work on windows!

data_file = data_path / 'the_facts.csv'
```



# OO Design: Not Good Examples 

<br>

A few dreaded python OO libraries:

:::{.incremental}
- PyQT (Too many objects)
- VTK (Too many objects)
- Boto3 (dynamic loading objects, huge number of objects, etc.)
:::



# Derrick's OO Design Guidelines 

:::{.incremental}
- Common uses shouldn't require more than 3 classes (make a user-friendly code not a puzzle)
- Classes are simplest when extensions of familiar protocols (ie list-like plus extra bits)
- Class division at a high data level (DataFrame rather than dict of Series)
- Take it easy on operator overloading
- Avoid deep and multiple inheritance
- Prefer to return new instances rather than modify in place
- Functions are just fine too!
:::
