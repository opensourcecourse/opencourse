---
title: "Git Good (Enough)"
subtitle: A brief introduction to Git
format:
    revealjs:
        slide-number: true
        chalkboard:
          buttons: true
        preview-links: auto
        logo: ../../images/logo.png
        theme: [../../custom_slides.scss]
        view-distance: 50

footer: \
    <a href="https://opensourcecourse.dev/modules/git/overview.html">overview</a> /\
    <a href="https://github.com/opensourcecourse/opencourse/blob/main/modules/git/slides.qmd">source</a> /\
    <a href="https://opensourcecourse.dev/modules/git/exercises.html">exercises</a>
---

## Overview

</br>

::: {style="font-size: 1.4em; text-align: center; presentation-line-height: 1.0"}

- Conceptual framework
- Common git commands
- Branching models

:::


## The Problem with Git Tutorials

::: {.r-stack}
![](images/thought_tools.png)
:::


## Conceptual Framework {.nostretch auto-animate="true"}

</br>

::: {style="font-size: 1.4em; text-align: center; presentation-line-height: 1.0"}
A graphical, graphical model
:::

</br>

```{mermaid}
%%| fig-width: 10
    gitGraph
       commit
       commit
       branch develop
       checkout develop
       commit
       commit
       checkout main
       merge develop
       checkout develop
       commit
       commit
       checkout main
       commit
       branch fix_1
       commit
       commit
       checkout main
       merge fix_1
       commit
       checkout develop
```



## Conceptual Framework {.nostretch auto-animate="true"}

### Scenario

::: incremental

- We have just created an empty directory
- We are going to write some code
- Then make some changes
- and manage it all with git

:::



## Conceptual Framework {.nostretch auto-animate="true"}

First we create a new file.
</br>

```{.python filename="myscript.py"}
def add_numbers(num1, num2):
    """Add two things together"""
    answer = num1 + num2
    print(f"{num1} + {num2} is {answer}")

add_numbers(2, 2)
```



## Conceptual Framework {.nostretch auto-animate="true"}

Then look at the difference between nothing and current state.

:::{.callout-note appearance="minimal"}
< myscript.py >

[+1] [def add_numbers(num1, num2):]{style="color: green;"}

[+2]    ["""Add two things together"""]{style="color: green;"}

[+3]    [answer = num1 + num2]{style="color: green;"}

[+4]    [print(f"{num1} + {num2} is {answer}")]{style="color: green;"}
:::



## Conceptual Framework {.nostretch auto-animate="true"}

We propose saving the changes.

:::{.callout-warning appearance="minimal"}

< myscript.py >

[+1] [def add_numbers(num1, num2):]{style="color: green;"}

[+2]    ["""Add two things together"""]{style="color: green;"}

[+3]    [answer = num1 + num2]{style="color: green;"}

[+4]    [print(f"{num1} + {num2} is {answer}")]{style="color: green;"}
:::



## Conceptual Framework {.nostretch auto-animate="true"}

Then commit to saving them.

:::{.callout-tip appearance="minimal"}
## [1989ee1]

< myscript.py >

[+1] [def add_numbers(num1, num2):]{style="color: green;"}

[+2]    ["""Add two things together"""]{style="color: green;"}

[+3]    [answer = num1 + num2]{style="color: green;"}

[+4]    [print(f"{num1} + {num2} is {answer}")]{style="color: green;"}
:::



## Conceptual Framework {auto-animate="true"}

This creates our first commit (dot) on the default branch (main).

</br>

```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "0-1989ee1"
```



## Conceptual Framework {.nostretch auto-animate="true"}

Each commit has metadata.

:::{.callout-tip appearance="minimal"}
## [1989ee1]

< myscript.py >

[+1] [def add_numbers(num1, num2):]{style="color: green;"}

[+2]    ["""Add two things together"""]{style="color: green;"}

[+3]    [answer = num1 + num2]{style="color: green;"}

[+4]    [print(f"{num1} + {num2} is {answer}")]{style="color: green;"}
:::



## Conceptual Framework {.nostretch auto-animate="true"}

Each commit has metadata.

:::{.callout-tip appearance="minimal"}
## [1989ee1]
    commit message  => "First file"
    committer       => Bob Belcher <bobs@gmail.com>
    commit date     => Sat Nov 8 11:13:49 2014 +0100
    author          => Bob Belcher <bobs@gmail.com>
    author date     => Sat Nov 8 11:13:49 2014 +0100
    ...
:::



## Conceptual Framework {.nostretch auto-animate="true"}

Next, we make some changes.

</br>

```{.python filename="myscript.py"}

def add_numbers(num1, num2):
    """Add two things together"""
    answer = num1 + num2
    print(f"{num1} + {num2} is {answer}")

add_numbers(2, 2)
```



## Conceptual Framework {.nostretch auto-animate="true"}

Next, we make some changes.

</br>

```{.python filename="myscript.py"}

def add_numbers(num1, num2):
    """Add two things together"""
    return num1 + num2

assert add_numbers(1, 1) == 2
```



## Conceptual Framework {.nostretch auto-animate="true"}

And view the difference from previous state to current.

:::{.callout-note appearance="minimal"}

< myscript.py >

[-4 answer = num1 + num2]{style="color: red;"}

[-5 print(f"{num1} + {num2} is {answer}")]{style="color: red;"}

[-7 add_numbers(2, 2)]{style="color: red;"}

[+4 return num1 + num2]{style="color: green;"}

[+6 assert add_numbers(1, 1) == 2]{style="color: green;"}
:::



## Conceptual Framework {.nostretch auto-animate="true"}

Then add the changes.

:::{.callout-warning appearance="minimal"}

< myscript.py >

[-4 answer = num1 + num2]{style="color: red;"}

[-5 print(f"{num1} + {num2} is {answer}")]{style="color: red;"}

[-7 add_numbers(2, 2)]{style="color: red;"}

[+4 return num1 + num2]{style="color: green;"}

[+6 assert add_numbers(1, 1) == 2]{style="color: green;"}
:::




## Conceptual Framework {.nostretch auto-animate="true"}

And finally commit them.

:::{.callout-tip appearance="minimal"}

## [15d5f2a]

< myscript.py >

[-4 answer = num1 + num2]{style="color: red;"}

[-5 print(f"{num1} + {num2} is {answer}")]{style="color: red;"}

[-7 add_numbers(2, 2)]{style="color: red;"}

[+4 return num1 + num2]{style="color: green;"}

[+6 assert add_numbers(1, 1) == 2]{style="color: green;"}
:::



## Conceptual Framework {.nostretch auto-animate="true"}

Which adds a new commit to our main branch.

</br>

```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "0-1989ee1"
   commit id: "1-15d5f2a"
```


## Knowledge Check {.nostretch auto-animate="true"}
</br>
```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "0-1989ee1"
   commit id: "1-15d5f2a"
```

::: incremental
- What is main?
- What is 15d5f2a?
- What information does it contain?
:::



## Conceptual Framework {.nostretch auto-animate="true"}

We can create *branches* with their own commits

(think parallel universe)

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "0-1989ee1"
   commit id: "1-15d5f2a"
   branch branch_1
   commit id: "2-a577878"
   commit id: "3-c17d954"
```

## Conceptual Framework {.nostretch auto-animate="true"}

Then merge branches back together

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "0-1989ee1"
   commit id: "1-15d5f2a"
   branch branch_1
   commit id: "2-a577878"
   commit id: "3-c17d954"
   checkout main
   merge branch_1
```



## Conceptual Framework {.nostretch auto-animate="true"}

Which has the same effect (on the code) as committing on main

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "0-1989ee1"
   commit id: "1-15d5f2a"
   commit id: "2-a577878"
   commit id: "3-c17d954"
```


## Conceptual Framework {.nostretch auto-animate="true"}

But what if someone else makes changes?

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "0-1989ee1"
   commit id: "1-15d5f2a"
   branch branch_1
   commit id: "2-a577878"
   commit id: "3-c17d954"
   checkout main
   commit
   commit
```


## Conceptual Framework {.nostretch auto-animate="true"}

We can still bring the branch_1 changes back to main

But we might have *conflicts*

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "0-1989ee1"
   commit id: "1-15d5f2a"
   branch branch_1
   commit id: "2-a577878"
   commit id: "3-c17d954"
   checkout main
   commit
   commit
   merge branch_1
```



## Conceptual Framework {.nostretch auto-animate="true"}

What should happen if the changes on both branches aren't compatible?

:::{.r-stack}

:::{.fragment}
- Prioritize changes on main?
- Prioritize changes on branch_1?
- Make the merger sort it out?
:::

:::{.fragment}
![](https://static1.cbrimages.com/wordpress/wp-content/uploads/2019/02/Batman-slapping-Robin-Meme-Blank.jpg?q=50&fit=contain&w=750&h=&dpr=1.5)
:::

:::



## Basic Git Commands

::: {.incremental}

::: {style="font-size: 1.3em; text-align: center; presentation-line-height: 1.0"}
* clone - download repo
* add - propose changes to save
* commit - save changes
* status - see state summary
* push - send changes somewhere
* pull - download and apply changes
* checkout - switch to another branch/commit
:::

:::


## clone
</br>







