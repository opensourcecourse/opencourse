---
title: "Git Good (Enough)"
subtitle: A brief introduction to Git
format:
    revealjs:
        slide-number: true
        chalkboard:
          buttons: true
        preview-links: auto
        logo: ../../images/logo.png
        theme: [../../custom_slides.scss]
        view-distance: 100
        mobile-view-distance: 100
        css: ../../slides.css

footer: \
    <a href="https://opensourcecourse.dev/modules/git/overview.html">overview</a> /\
    <a href="https://github.com/opensourcecourse/opencourse/blob/main/modules/git/slides.qmd">source</a> /\
    <a href="https://opensourcecourse.dev/modules/git/exercises.html">exercises</a>
---

## Overview

</br>

::: {style="font-size: 1.4em; text-align: center; presentation-line-height: 1.0"}

- Conceptual framework
- Common git commands
- Branching models

:::


## The Problem with Git Tutorials

::: {.r-stack}
![](images/thought_tools.png)
:::


## Conceptual Framework {.nostretch auto-animate="true"}

</br>

::: {style="font-size: 1.4em; text-align: center; presentation-line-height: 1.0"}
A graphical, graphical model
:::

</br>

```{mermaid}
%%| fig-width: 10
    gitGraph
       commit
       commit
       branch develop
       checkout develop
       commit
       commit
       checkout main
       merge develop
       checkout develop
       commit
       commit
       checkout main
       commit
       branch fix_1
       commit
       commit
       checkout main
       merge fix_1
       commit
       checkout develop
```



## Conceptual Framework {.nostretch auto-animate="true"}

### Scenario

::: incremental

- We have just created an empty directory
- We are going to write some code
- Then make some changes
- and manage it all with git

:::



## Conceptual Framework {.nostretch auto-animate="true"}

First we create a new file.

</br>

```{.python filename="myscript.py"}
def add_numbers(num1, num2):
    """Add two things together"""
    answer = num1 + num2
    print(f"{num1} + {num2} is {answer}")

add_numbers(2, 2)
```



## Conceptual Framework {.nostretch auto-animate="true"}

Then look at the difference between nothing and current state.

:::{.callout-note appearance="minimal"}
< myscript.py >

[+1] [def add_numbers(num1, num2):]{style="color: green;"}

[+2]    ["""Add two things together"""]{style="color: green;"}

[+3]    [answer = num1 + num2]{style="color: green;"}

[+4]    [print(f"{num1} + {num2} is {answer}")]{style="color: green;"}

[+5]

[+6] [add_numbers(2, 2)]{style="color: green;"}
:::



## Conceptual Framework {.nostretch auto-animate="true"}

We propose saving the changes.

:::{.callout-warning appearance="minimal"}

< myscript.py >

[+1] [def add_numbers(num1, num2):]{style="color: green;"}

[+2]    ["""Add two things together"""]{style="color: green;"}

[+3]    [answer = num1 + num2]{style="color: green;"}

[+4]    [print(f"{num1} + {num2} is {answer}")]{style="color: green;"}

[+5]

[+6] [add_numbers(2, 2)]{style="color: green;"}
:::



## Conceptual Framework {.nostretch auto-animate="true"}

Then commit to saving them. Note the commit Tag.

:::{.callout-tip appearance="minimal"}
## [9d6b7c]

< myscript.py >

[+1] [def add_numbers(num1, num2):]{style="color: green;"}

[+2]    ["""Add two things together"""]{style="color: green;"}

[+3]    [answer = num1 + num2]{style="color: green;"}

[+4]    [print(f"{num1} + {num2} is {answer}")]{style="color: green;"}

[+5]

[+6] [add_numbers(2, 2)]{style="color: green;"}
:::



## Conceptual Framework {auto-animate="true"}

This creates our first commit (dot) on the default branch (main).
"HEAD" is the latest commit on the current branch.

</br>

```{mermaid}
%%| fig-width: 3
gitGraph
   commit id: "9d6b7c"
```



## Conceptual Framework {.nostretch auto-animate="true"}

Each commit has metadata.

:::{.callout-tip appearance="minimal"}
## [9d6b7c...] (HEAD, main)

Author:

    Derrick Chambers
    <d-chambers@users.noreply.github.com>

Date:

    Mon Sep 26 20:11:10 2022 -0600

Message:

    work on myscript

...
:::



## Conceptual Framework {.nostretch auto-animate="true"}

Next, we make some changes.

</br>

```{.python filename="myscript.py"}
def add_numbers(num1, num2):
    """Add two things together"""
    answer = num1 + num2
    print(f"{num1} + {num2} is {answer}")

add_numbers(2, 2)
```



## Conceptual Framework {.nostretch auto-animate="true"}

Next, we make some changes.

</br>

```{.python filename="myscript.py"}
def add_numbers(num1, num2):
    """Add two things together"""
    return num1 + num2

assert add_numbers(1, 1) == 2
```



## Conceptual Framework {.nostretch auto-animate="true"}

And view the difference from previous state to current.

:::{.callout-note appearance="minimal"}

< myscript.py >

[-4 answer = num1 + num2]{style="color: red;"}

[-5 print(f"{num1} + {num2} is {answer}")]{style="color: red;"}

[-7 add_numbers(2, 2)]{style="color: red;"}

[+3 return num1 + num2]{style="color: green;"}

[+5 assert add_numbers(1, 1) == 2]{style="color: green;"}
:::



## Conceptual Framework {.nostretch auto-animate="true"}

Then add the changes.

:::{.callout-warning appearance="minimal"}

< myscript.py >

[-4 answer = num1 + num2]{style="color: red;"}

[-5 print(f"{num1} + {num2} is {answer}")]{style="color: red;"}

[-7 add_numbers(2, 2)]{style="color: red;"}

[+3 return num1 + num2]{style="color: green;"}

[+5 assert add_numbers(1, 1) == 2]{style="color: green;"}
:::




## Conceptual Framework {.nostretch auto-animate="true"}

And finally commit them.

:::{.callout-tip appearance="minimal"}

## [046a7a]

< myscript.py >

[-4 answer = num1 + num2]{style="color: red;"}

[-5 print(f"{num1} + {num2} is {answer}")]{style="color: red;"}

[-7 add_numbers(2, 2)]{style="color: red;"}

[+3 return num1 + num2]{style="color: green;"}

[+5 assert add_numbers(1, 1) == 2]{style="color: green;"}
:::



## Conceptual Framework {.nostretch auto-animate="true"}

Which adds a new commit to our main branch.

</br>

```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
```


## Knowledge Check {.nostretch auto-animate="true"}
</br>
```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
```

::: incremental
- What is main?
- What is 046a7a?
- What information does it contain?
- What commit does "HEAD" refer to?
:::



## Conceptual Framework {.nostretch auto-animate="true"}

We can create *branches* with their own commits

(think parallel universe)

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch branch_1
   commit id: "2-a577878"
   commit id: "3-c17d954"
```

## Conceptual Framework {.nostretch auto-animate="true"}

Then merge branches (e.g., back into main)

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "1-046a7a"
   branch branch_1
   commit id: "4c0f818"
   commit id: "221d22"
   checkout main
   merge branch_1
```



## Conceptual Framework {.nostretch auto-animate="true"}

Which has the same effect (on the code) as committing on main

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```


## Conceptual Framework {.nostretch auto-animate="true"}

But what if changes are made on main before the merge?

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch branch_1
   commit id: "4c0f818"
   commit id: "221d22"
   checkout main
   commit
   commit
```


## Conceptual Framework {.nostretch auto-animate="true"}

We can still merge branch_1 into main but....

there might be *conflicts*

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch branch_1
   commit id: "4c0f818"
   commit id: "221d22"
   checkout main
   commit
   commit
   merge branch_1
```



## Conceptual Framework {.nostretch auto-animate="true"}

What should happen if the changes aren't compatible?

:::{.r-stack}

:::{.fragment .fade-in-then-out}
- Prioritize changes on main?
- Prioritize changes on branch_1?
- Make the merger sort it out?
:::

:::{.fragment .fade-in-then-out}
 **Make the merger sort it out!**
:::


:::{.fragment}
![](https://static1.cbrimages.com/wordpress/wp-content/uploads/2019/02/Batman-slapping-Robin-Meme-Blank.jpg?q=50&fit=contain&w=750&h=&dpr=1.5)
:::

:::



## Conceptual Framework {.nostretch auto-animate="true"}

What should happen if the changes aren't compatible?

</br>

```{.python filename="myscript.py (main)"}
"""
A script to practice using functions.

A brilliant script written by Derrick.
"""
...
```



## Conceptual Framework {.nostretch auto-animate="true"}

What should happen if the changes aren't compatible?

</br>

```{.python filename="myscript.py (branch_2)"}
"""
A script to practice using functions.

A really dumb script written by Peiyao.
"""
...
```



## Conceptual Framework {.nostretch auto-animate="true"}

What should happen if the changes aren't compatible?

</br>

```{.python filename="myscript.py (merge conflict)" code-line-numbers="|3-6|6-8"}
"""
A script to practice using functions.

<<<<<<< HEAD
A brilliant script written by Derrick.
=======
A really dumb script writen by Peiyao.
>>>>>>> branch_2
"""
...
```



## Conceptual Framework {.nostretch auto-animate="true"}

What should happen if the changes aren't compatible?

</br>

```{.python filename="myscript.py (resolved)" code-line-numbers="4"}
"""
A script to practice using functions.

A brilliant script written by Derrick.
"""
...
```



## Knowledge Check {.nostretch auto-animate="true"}
</br>

Now that we have fixed the file:

::: incremental
- What do we need to do next?
- and after adding the changes?
:::



## Conceptual Framework {.nostretch auto-animate="true"}

Commits can be *squashed* (combined)

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```



## Conceptual Framework {.nostretch auto-animate="true"}

Commits can be *squashed* (combined)

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "ab3b7c"
   commit id: "046a7a" type: REVERSE
   commit id: "4c0f818" type: REVERSE
   commit id: "221d22" type: REVERSE
```



## Conceptual Framework {.nostretch auto-animate="true"}

Commits can be be *tagged* (usually with a version)

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a" tag: "v1.0.0"
   commit id: "4c0f818"
   commit id: "221d22" tag: "v1.1.0"
```


## Conceptual Framework {.nostretch auto-animate="true"}

Commits can be *Cherry-Picked*

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   checkout main
   commit id: "4c0f818"
   commit id: "221d22"
```


## Conceptual Framework {.nostretch auto-animate="true"}

Commits can be *Cherry-Picked*

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   checkout main
   commit id: "4c0f818"
   commit id: "221d22"
   commit id: "dc12a2"
```



## Conceptual Framework {.nostretch auto-animate="true"}

Branches can be *rebased*

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   checkout main
   commit id: "4c0f818"
   commit id: "221d22"
```



## Conceptual Framework {.nostretch auto-animate="true"}

Branches can be *rebased*

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```



## Conceptual Framework {.nostretch auto-animate="true"}

Git is a *distributed* version control system

This means it knows how to interact with other repositories.



## Conceptual Framework {.nostretch auto-animate="true"}

We can *clone* remote (non-local) repositories

::: {.repo_header}
origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```



## Conceptual Framework {.nostretch auto-animate="true"}

We can *clone* remote (non-local) repositories

::: {.repo_header}
local
:::

```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```

::: {.repo_header}
origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```



## Conceptual Framework {.nostretch auto-animate="true"}

And *fetch* non-default branches

::: {.repo_header}
local
:::

```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```

::: {.repo_header}
origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```



## Conceptual Framework {.nostretch auto-animate="true"}

And *fetch* non-default branches

::: {.repo_header}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```

::: {.repo_header}
origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```




## Conceptual Framework {.nostretch auto-animate="true"}

We make local changes and *push* them back to remote

::: {.repo_header}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```

::: {.repo_header}
origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```



## Conceptual Framework {.nostretch auto-animate="true"}

We make local changes and *push* them back to remote

::: {.repo_header}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```

::: {.repo_header}
origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```



## Conceptual Framework {.nostretch auto-animate="true"}

We *pull* changes from remote to local

::: {.repo_header}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```

::: {.repo_header}
origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```



## Conceptual Framework {.nostretch auto-animate="true"}

We *pull* changes from remote to local

::: {.repo_header}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```

::: {.repo_header}
origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```



## Basic Git Commands

::: {.incremental}

::: {style="font-size: 1.3em; text-align: center; presentation-line-height: 1.0"}
* clone - download repo
* add - propose changes to save
* commit - save changes
* status - see state summary
* push - send changes somewhere
* pull - download and apply changes
* checkout - switch to another branch/commit
:::

:::


## clone
</br>







