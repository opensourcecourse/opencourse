---
title: "Git Good (Enough)"
subtitle: A graphical introduction to Git
format:
    revealjs:
        slide-number: true
        preview-links: auto
        logo: ../../images/logo.png
        theme: [../../custom_slides.scss]
        css: ../../slides.css
        view-distance: 100
        mobile-view-distance: 100
        navigation-mode: vertical
        controls-layout: bottom-right
        controls-tutorial: true

footer: \
    <a href="https://opensourcecourse.dev/modules/git/overview.html">overview</a> /\
    <a href="https://github.com/opensourcecourse/opencourse/blob/main/modules/git/slides.qmd">source</a> /\
    <a href="https://opensourcecourse.dev/modules/git/exercises.html">exercises</a>
---


# The Problem with Git Tutorials

::: {.r-stack}
![](images/thought_tools.png)
:::


# Git Through Graphs {.nostretch auto-animate="true" .top}

## Git Through Graphs {.nostretch auto-animate="true" .top}

# Git Through Graphs {.nostretch auto-animate="true"}

</br>

::: {style="font-size: 1.4em; text-align: center; presentation-line-height: 1.0"}
A graphical, graphical model
:::

```{mermaid}
%%| fig-width: 10
    gitGraph
       commit
       commit
       branch develop
       checkout develop
       commit
       commit
       checkout main
       merge develop
       checkout develop
       commit
       commit
       checkout main
       commit
       branch fix_1
       commit
       commit
       checkout main
       merge fix_1
       commit
       checkout develop
```



## Git Through Graphs {.nostretch auto-animate="true" visibility="uncounted"}

### Scenario

::: incremental

- We have just created an empty directory
- We are going to write some code
- Then make some changes
- and manage it all with git

:::



## Git Through Graphs {.nostretch auto-animate="true" visibility="uncounted"}

First we *init* the repo, then create a new file.

</br>

```{.python filename="myscript.py"}
def add_numbers(num1, num2):
    """Add two things together"""
    answer = num1 + num2
    print(f"{num1} + {num2} is {answer}")

add_numbers(2, 2)
```



## Git Through Graphs {.nostretch auto-animate="true" visibility="uncounted"}

Then *diff* to see difference between previous (nothing) and current state.

:::{.callout-note appearance="minimal"}
< myscript.py >

[+1] [def add_numbers(num1, num2):]{style="color: green;"}

[+2]    ["""Add two things together"""]{style="color: green;"}

[+3]    [answer = num1 + num2]{style="color: green;"}

[+4]    [print(f"{num1} + {num2} is {answer}")]{style="color: green;"}

[+5]

[+6] [add_numbers(2, 2)]{style="color: green;"}
:::



## Git Through Graphs {.nostretch auto-animate="true" visibility="uncounted"}

We *add* modified files so git knows we may want to save them.

:::{.callout-warning appearance="minimal"}

< myscript.py >

[+1] [def add_numbers(num1, num2):]{style="color: green;"}

[+2]    ["""Add two things together"""]{style="color: green;"}

[+3]    [answer = num1 + num2]{style="color: green;"}

[+4]    [print(f"{num1} + {num2} is {answer}")]{style="color: green;"}

[+5]

[+6] [add_numbers(2, 2)]{style="color: green;"}
:::



## Git Through Graphs {.nostretch auto-animate="true" visibility="uncounted"}

Then *commit* to saving them. Note the Tag.

:::{.callout-tip appearance="minimal"}
## [9d6b7c]

< myscript.py >

[+1] [def add_numbers(num1, num2):]{style="color: green;"}

[+2]    ["""Add two things together"""]{style="color: green;"}

[+3]    [answer = num1 + num2]{style="color: green;"}

[+4]    [print(f"{num1} + {num2} is {answer}")]{style="color: green;"}

[+5]

[+6] [add_numbers(2, 2)]{style="color: green;"}
:::



## Git Through Graphs {auto-animate="true" visibility="uncounted"}

This creates our first commit (dot) on the default branch (main).
"HEAD" is the latest commit on the current branch.

</br>

```{mermaid}
%%| fig-width: 3
gitGraph
   commit id: "9d6b7c"
```



## Git Through Graphs {.nostretch auto-animate="true" visibility="uncounted"}

Each commit has metadata.

:::{.callout-tip appearance="minimal"}
## [9d6b7c...] (HEAD, main)

Author:

    Derrick Chambers
    <d-chambers@users.noreply.github.com>

Date:

    >Mon Sep 26 20:11:10 2022 -0600

Message:

    work on myscript
...
:::



## Git Through Graphs {.nostretch auto-animate="true"}

Next, we make some changes.

</br>

```{.python filename="myscript.py"}
def add_numbers(num1, num2):
    """Add two things together"""
    answer = num1 + num2
    print(f"{num1} + {num2} is {answer}")

add_numbers(2, 2)
```



## Git Through Graphs {.nostretch auto-animate="true"}

Next, we make some changes.

</br>

```{.python filename="myscript.py"}
def add_numbers(num1, num2):
    """Add two things together"""
    return num1 + num2

assert add_numbers(1, 1) == 2
```



## Git Through Graphs {.nostretch auto-animate="true"}

And *diff* to see the difference from previous state to current.

:::{.callout-note appearance="minimal"}

< myscript.py >

[-4 answer = num1 + num2]{style="color: red;"}

[-5 print(f"{num1} + {num2} is {answer}")]{style="color: red;"}

[-7 add_numbers(2, 2)]{style="color: red;"}

[+3 return num1 + num2]{style="color: green;"}

[+5 assert add_numbers(1, 1) == 2]{style="color: green;"}
:::



## Git Through Graphs {.nostretch auto-animate="true"}

Then add the changes.

:::{.callout-warning appearance="minimal"}

< myscript.py >

[-4 answer = num1 + num2]{style="color: red;"}

[-5 print(f"{num1} + {num2} is {answer}")]{style="color: red;"}

[-7 add_numbers(2, 2)]{style="color: red;"}

[+3 return num1 + num2]{style="color: green;"}

[+5 assert add_numbers(1, 1) == 2]{style="color: green;"}
:::




## Git Through Graphs {.nostretch auto-animate="true"}

And finally *commit* them.

:::{.callout-tip appearance="minimal"}

## [046a7a]

< myscript.py >

[-4 answer = num1 + num2]{style="color: red;"}

[-5 print(f"{num1} + {num2} is {answer}")]{style="color: red;"}

[-7 add_numbers(2, 2)]{style="color: red;"}

[+3 return num1 + num2]{style="color: green;"}

[+5 assert add_numbers(1, 1) == 2]{style="color: green;"}
:::



## Git Through Graphs {.nostretch auto-animate="true"}

Which adds a new commit to our main branch.

</br>

```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
```


## Knowledge Check {.nostretch auto-animate="true"}
</br>
```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
```

::: incremental
- What is main?
- What is 046a7a?
- What information does it contain?
- What commit does "HEAD" refer to?
:::



## Git Through Graphs {.nostretch auto-animate="true"}

We can create *branches* with their own commits

(think parallel universe)

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch branch_1
   commit id: "2-a577878"
   commit id: "3-c17d954"
```

## Git Through Graphs {.nostretch auto-animate="true"}

Then merge branches (e.g., back into main)

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "1-046a7a"
   branch branch_1
   commit id: "4c0f818"
   commit id: "221d22"
   checkout main
   merge branch_1
```



## Git Through Graphs {.nostretch auto-animate="true"}

Which has the same effect (on the code) as committing on main

</br>

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```


## Git Through Graphs {.nostretch auto-animate="true"}

But what if changes are made on main before the merge?

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch branch_1
   commit id: "4c0f818"
   commit id: "221d22"
   checkout main
   commit
   commit
```


## Git Through Graphs {.nostretch auto-animate="true"}

We can still merge branch_1 into main but....

there might be *conflicts*

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch branch_1
   commit id: "4c0f818"
   commit id: "221d22"
   checkout main
   commit
   commit
   merge branch_1
```



## Git Through Graphs {.nostretch auto-animate="true"}

What should happen if the changes aren't compatible?

:::{.r-stack}

:::{.fragment .fade-in-then-out}
- Prioritize changes on main?
- Prioritize changes on branch_1?
- Make the merger sort it out?
:::

:::{.fragment .fade-in-then-out}
 **Make the merger sort it out!**
:::


:::{.fragment}
![](images/bat_smack.avif)
:::

:::



## Git Through Graphs {.nostretch auto-animate="true"}

What should happen if the changes aren't compatible?

</br>

```{.python filename="myscript.py (main)"}
"""
A script to practice using functions.

A brilliant script written by Derrick.
"""
...
```



## Git Through Graphs {.nostretch auto-animate="true"}

What should happen if the changes aren't compatible?

</br>

```{.python filename="myscript.py (branch_2)"}
"""
A script to practice using functions.

A really dumb script written by Peiyao.
"""
...
```



## Git Through Graphs {.nostretch auto-animate="true"}

What should happen if the changes aren't compatible?

</br>

```{.python filename="myscript.py (merge conflict)" code-line-numbers="|3-6|6-8"}
"""
A script to practice using functions.

<<<<<<< HEAD
A brilliant script written by Derrick.
=======
A really dumb script writen by Peiyao.
>>>>>>> branch_2
"""
...
```



## Git Through Graphs {.nostretch auto-animate="true"}

What should happen if the changes aren't compatible?

</br>

```{.python filename="myscript.py (resolved)" code-line-numbers="4"}
"""
A script to practice using functions.

A brilliant script written by Derrick.
"""
...
```



## Knowledge Check {.nostretch auto-animate="true"}
</br>

Now that we have fixed the file:

::: incremental
- What do we need to do next?
- and after adding the changes?
:::



## Git Through Graphs {.nostretch auto-animate="true"}

Commits can be *squashed* (combined)

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```



## Git Through Graphs {.nostretch auto-animate="true"}

Commits can be *squashed* (combined)

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "ab3b7c"
   commit id: "046a7a" type: REVERSE
   commit id: "4c0f818" type: REVERSE
   commit id: "221d22" type: REVERSE
```



## Git Through Graphs {.nostretch auto-animate="true"}

Commits can be be *tagged* (usually with a version)

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a" tag: "v1.0.0"
   commit id: "4c0f818"
   commit id: "221d22" tag: "v1.1.0"
```


## Git Through Graphs {.nostretch auto-animate="true"}

Commits can be *Cherry-Picked*

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   checkout main
   commit id: "4c0f818"
   commit id: "221d22"
```


## Git Through Graphs {.nostretch auto-animate="true"}

Commits can be *Cherry-Picked*

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   checkout main
   commit id: "4c0f818"
   commit id: "221d22"
   commit id: "dc12a2"
```



## Git Through Graphs {.nostretch auto-animate="true"}

Branches can be *rebased*

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   checkout main
   commit id: "4c0f818"
   commit id: "221d22"
```



## Git Through Graphs {.nostretch auto-animate="true"}

Branches can be *rebased*

</br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```



## Git Through Graphs {.nostretch auto-animate="true"}

HEAD can be *reset*, keeping or discarding commits/unsaved changes


```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```



## Git Through Graphs {.nostretch auto-animate="true"}

Soft *reset*


```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "Unsaved" type: HIGHLIGHT
```



## Git Through Graphs {.nostretch auto-animate="true"}

Hard *reset*


```{mermaid}
%%| fig-width: 4
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
```

:::{.fragment}

:::{.callout-caution .fragment}
All commits and unsaved work after "046a7a" really are gone...
:::

:::



## Git Through Graphs {.nostretch auto-animate="true"}

Hard *reset*

::: {.r-stack}

![](images/hes-dead-jim.jpg)

:::









## Git Through Graphs {.nostretch auto-animate="true"}

Git is a *distributed* version control system

This means it knows how to interact with other repositories.



## Git Through Graphs {.nostretch auto-animate="true"}

We can *clone* remote (non-local) repositories

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```



## Git Through Graphs {.nostretch auto-animate="true"}

We can *clone* remote (non-local) repositories

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```



## Git Through Graphs {.nostretch auto-animate="true"}

And *fetch* non-default branches

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```



## Git Through Graphs {.nostretch auto-animate="true"}

And *fetch* non-default branches

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```




## Git Through Graphs {.nostretch auto-animate="true"}

We make local changes and *push* them back to remote

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```



## Git Through Graphs {.nostretch auto-animate="true"}

We make local changes and *push* them back to remote

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```



## Git Through Graphs {.nostretch auto-animate="true"}

We *pull* changes from remote to local

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```



## Git Through Graphs {.nostretch auto-animate="true"}

We *pull* changes from remote to local

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```



## Git Through Graphs {.nostretch auto-animate="true"}

*fork* creates remote clones

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```



## Git Through Graphs {.nostretch auto-animate="true"}

*fork* creates remote clones

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```



## Other Useful Git Commands

::: {.incremental}

::: {.center_midsized}
* checkout - Move HEAD to different location (commit or branch)
* log - Display info about previous commits
* status - Show local state (current branch) and unsaved changes
* show - Show info about a git object
* stash - Save changes outside of a commit
:::

:::



## Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (1)

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
```



## Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (1)

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch develop
```



## Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (2)

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
```



## Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (2)

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
```



## Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (3)

:::{.centered_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   branch develop
   commit id: "34ad12"
```



## Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (3)

:::{.centered_midsized}
local
:::

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
```

:::{.centered_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   branch develop
   commit id: "34ad12"
```



## Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (4)

:::{.centered_midsized}
local
:::

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
```

:::{.centered_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
```



## Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (4)

:::{.centered_midsized}
local
:::

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
```

:::{.centered_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
```



## Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (5)

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch develop
   commit id: "4c0f818"
   checkout main
   commit id: "14359ab"
   commit id: "a2b55ce"
```



## Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (5)

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "14359ab"
   commit id: "a2b55ce"
   branch develop
   commit id: "4c0f818"
```



## Common Workflow {.nostretch auto-animate="true"}

*fork* a repo

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```



## Common Workflow {.nostretch auto-animate="true"}

*fork* a repo

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```



## Common Workflow {.nostretch auto-animate="true"}

*clone* the fork

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```



## Common Workflow {.nostretch auto-animate="true"}

*clone* the fork

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```



## Common Workflow {.nostretch auto-animate="true"}

*branch* to create a new feature

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```



## Common Workflow {.nostretch auto-animate="true"}

*branch* to create a new feature

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
```


## Common Workflow {.nostretch auto-animate="true"}

Write some code, *add*, *commit*

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
```



## Common Workflow {.nostretch auto-animate="true"}

Write some code, *add*, *commit*

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
   commit id: "a342bc"
   commit id: "adeb12"
```



## Common Workflow {.nostretch auto-animate="true"}

*push* new code to fork

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
   commit id: "a342bc"
   commit id: "adeb12"
```

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```



## Common Workflow {.nostretch auto-animate="true"}

*push* new code to fork

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
   commit id: "a342bc"
   commit id: "adeb12"
```

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
   commit id: "a342bc"
   commit id: "adeb12"
```



## Common Workflow {auto-animate="true"}

Submit a *pull request* to add changes to origin/main.

[Get it approved!]{.fragment}

::: {.r-stack}

:::{.fragment}
![](images/yes.png){height="450"}
:::

:::



## Common Workflow {.nostretch auto-animate="true"}

*squash* commits on branch

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
   commit id: "a342bc"
   commit id: "adeb12"
```



## Common Workflow {.nostretch auto-animate="true"}

*squash* commits on branch

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
   commit id: "ba34dc"
```



## Common Workflow {.nostretch auto-animate="true"}

*merge* remote/new_feature into origin/main

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
   commit id: "ba34dc"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```


## Common Workflow {.nostretch auto-animate="true"}

*merge* remote/new_feature into origin/main

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
   commit id: "ba34dc"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   commit id: "ba34dc"
```

## Branching Strategies

:::{.incremental}

::: {.center_midsized}
- Main only
- Single Trunk
- Double Trunk
:::

:::



## Branching: Main Only

::: {.center_midsized}
- Working by yourself
- You only need checkpoints not branches
- Easiest strategy
:::

</br>

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```



## Branching: Single Trunk

:::{r-stack}

::: {.fragment}

::: {.center_midsized}
- Features and Bug fixes in separate branches
- All branches merge back to main
- Version bump depends on recent commits
- Main is always *deployable*
:::

:::

:::{.fragment}
```{mermaid}
%%| fig-width: 10
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a" tag: "v1.0.1"
   branch bug_fix_1
   commit id: "6bc3a3"
   commit id: "f23da3"
   checkout main
   branch feature_1
   commit id: "4c0f818"
   commit id: "221d22"
   commit id: "ac1d25"
   checkout main
   merge bug_fix_1 tag: "v1.0.2"
   merge feature_1 tag: "v1.1.0"
```
:::

:::



## Branching: Double Trunk

:::{r-stack}

::: {.center_midsized}
- Features and Bug fixes in separate branches
- Features merge to *develop*, bug fixes to *main*
- Bug fix releases are done on main
- Develop is merged into main for feature releases
- Main is merged into develop
:::

:::



## Branching: Double Trunk

</br>
```{mermaid}
%%| fig-width: 10
gitGraph
   commit id: "ab3490"
   branch develop
   commit id: "ac231c"
   commit id: "0931dc"

   checkout main
   commit id: "046a7a" tag: "v1.0.0"
   branch bug_fix_1
   commit id: "6bc3a3"
   commit id: "f23da3"
   checkout main
   merge bug_fix_1 tag: "v1.0.1"
   checkout develop
   branch feature_1
   commit id: "4c0f818"
   commit id: "221d22"
   checkout develop
   merge feature_1
   checkout main
   merge develop tag: "v1.1.0"
```





## Summary: the Tools

::: {.incremental}

::: {.center_midsized}
* add - Stage changes
* commit - Save changes (with metadata)
* clone - Download remote repo
* checkout - Move HEAD to specific branch/commit
* branch - Create new branch
* merge - Merge branches
* pull - Get changes from remote
* fetch - Get branch/tags from remote
* push - Push changes to remote
:::

:::
