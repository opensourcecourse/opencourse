---
title: "Git Good (Enough)"
---
![](../../images/factory_robots.png)

:::{.callout-note appearance="minimal"}
You can do a lot of things with git, and many of the rules of what you *should* do are not so much
technical limitations but are about what works well when working together with other people.
So git is a very powerful set of tools.

\- Linus Torvalds
:::

# Git

Git is a class of software known as a version control system (VCS). It is used to help developers manage the
complexity of collaborative development.

While very few devs are actually git experts, knowing the basics is *absolutely essential* for collaborative development.
While other VCS exist, git is used almost exclusively these days.

# Learning Objectives

In this module, we will:

1. Present a graphical conceptual model to help think about and understand git
2. Review some important git operations
3. Look at common branching models used by open-source projects
4. Practice getting out of sticky situations (merge-conflicts, detached heads, etc.)

# Reading

- [The 10 git commands you need](https://www.freecodecamp.org/news/10-important-git-commands-that-every-developer-should-know/)

# Additional Resources

 - [Software Carpentry's Git intro](https://swcarpentry.github.io/git-novice/)
 - [20 Git Commands With Examples](https://dzone.com/articles/top-20-git-commands-with-examples)
 - [Using VCS in VSCode](https://code.visualstudio.com/docs/editor/versioncontrol)
 - [Official git documentation](https://git-scm.com/doc)
 - [Git Cheat Sheet](https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet)
 - [Branching Strategies](https://www.flagship.io/git-branching-strategies/)
 - [Reverting Commits](https://stackoverflow.com/a/4114122/3645626)
 - [Commit Autonomy](https://blog.thoughtram.io/git/2014/11/18/the-anatomy-of-a-git-commit.html)
