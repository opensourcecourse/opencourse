---
title: "Style Matters"
subtitle: "Grokking Pythonic"
execute:
  enabled: true
format:
    revealjs:
        slide-number: true
        preview-links: auto
        theme: [../../custom_slides.scss]
        css: ../../slides.css
        navigation-mode: vertical
        controls-layout: bottom-right
        controls-tutorial: true

footer: \
    <a href="https://opensourcecourse.dev/modules/style/overview.html">overview</a> /\
    <a href="https://github.com/opensourcecourse/opencourse/blob/main/modules/style/slides.qmd">source</a> /\
    <a href="https://opensourcecourse.dev/modules/style/exercises.html">exercises</a>
---

# Overview

:::{.r-stack}
- A Case for Style
- Idiomatic Python
    - Principles: The Zen
    - Guidelines: PEP8
- Anti-patterns and Code Smells
    - Sloppiness
    - Wrong Language
    - Missing Python Features
:::



# A Case For Style

</br>

:::{.fragment}
As long as it works, why does it matter what it looks like?
:::

:::{.fragment}
What does work mean?
:::

:::{.r-stack}

::: incremental
- The inputs produce the expected outputs?
- The code is understandable?
- The code is easy to extend/debug?
- The code is maintainable?
:::

:::



# A Case for Style

:::{.r-stack}
![](images/babel.png){width="600"}
:::


# A Case for Style

</br>

:::{.r-stack}

```{python}
#| echo: false
#| output: true

import matplotlib.pyplot as plt
import numpy as np

with plt.xkcd():
    fig, ax = plt.subplots(1, 1)
    x_vals = np.arange(1, 100)
    y_vals = x_vals ** 1.1
    ax.plot(x_vals, y_vals)
    ax.set_xlabel('People who use the code')
    ax.set_ylabel("How much style matters")
    ax.set_xticks([])
    ax.set_yticks([])

plt.show()
```
:::




# Idiomatic Python

**Pythonic**: a coding style that leverages Python's unique features to write code that is readable and beautiful.

Pythonic code:

::: incremental

- Embodies Python's guiding principles (The Zen of Python)
- Follows community guidelines (PEP 8, PEP 257, black, etc.)
- Makes good use of python's features and libraries
- Is easy to change

:::



## History of The Zen

::: {.columns}

::: {.column width="40%"}
![](images/tim.png)
:::

::: {.column width="60%"}
Tim Peters wrote the Zen of Python, which was officially adopted via a Python Enhancement Proposal
([PEP 20](https://peps.python.org/pep-0020/)) in 2004.

```python
import this
```

Tim also invented [Timsort](https://en.wikipedia.org/wiki/Timsort), a popular sorting algorithm used in many modern languages.
:::

:::



# The Zen of Python

</br>

:::{.callout-note appearance="simple"}
## 1. Beautiful
Beautiful is better than ugly.
:::


## Beautiful code:

Although beauty is subjective, [this so post](https://softwareengineering.stackexchange.com/a/207932) does a good job
to explain the main attributed of beautiful code, which includes:

- Clarity and Transparency

- Elegance

- Efficiency

- Aesthetics


# The Zen of Python

</br>


:::{.callout-note appearance="simple"}
## 2. Explicit
Explicit is better than implicit.
:::



## Explicit

Explicit code means the



# The Zen of Python

</br>

:::{.callout-note appearance="simple"}
## 3. Simple
Simple is better than complex.\n\nComplex is better than complicated.
:::



# The Zen of Python

</br>

:::{.callout-note appearance="simple"}
## 4. Flat
Flat is better than nested.
:::



# The Zen of Python

</br>

:::{.callout-note appearance="simple"}
## 5. Sparse
Sparse is better than dense.
:::



# The Zen of Python

</br>

:::{.callout-note appearance="simple"}
## 6. Readable
Readability counts.
:::



# The Zen of Python

</br>

:::{.callout-note appearance="simple"}
## 7. Consistent
Special cases aren't special enough to break the rules.
:::



# The Zen of Python

</br>

:::{.callout-note appearance="simple"}
## 8. Pragmatic
Although practicality beats purity.
:::



# The Zen of Python

</br>

:::{.callout-note appearance="simple"}
## 9. Correct
Errors should never pass silently.\n\n Unless explicitly silenced.
:::



# The Zen of Python

</br>

:::{.callout-note appearance="simple"}
## 10. Unsurprising
In the face of ambiguity, refuse the temptation to guess.
:::



# The Zen of Python

</br>

:::{.callout-note appearance="simple"}
## 11. Intuitive
There should be one-- and preferably only one -- obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
:::



# The Zen of Python

</br>

:::{.callout-note appearance="simple"}
## 12. Operational
Now is better than never.
:::



# The Zen of Python

</br>

:::{.callout-note appearance="simple"}
## 13. Flexible
Although never is often better than \*right\* now.
:::



# The Zen of Python

</br>

:::{.callout-note appearance="simple"}
## 14. Explainable
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
:::



# The Zen of Python

</br>

:::{.callout-note appearance="simple"}
## 15. Organized
Namespaces are one honking great idea -- let's do more of those!
:::





