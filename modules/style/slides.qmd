---
title: "Style Matters"
subtitle: "Grokking Pythonic"
execute:
  enabled: true
format:
    revealjs:
        slide-number: true
        preview-links: auto
        theme: [../../custom_slides.scss]
        css: ../../slides.css
        navigation-mode: vertical
        controls-layout: bottom-right
        controls-tutorial: true

footer: \
    <a href="https://opensourcecourse.dev/modules/style/overview.html">overview</a> /\
    <a href="https://github.com/opensourcecourse/opencourse/blob/main/modules/style/slides.qmd">source</a> /\
    <a href="https://opensourcecourse.dev/modules/style/exercises.html">exercises</a>
---

# Overview

:::{.r-stack}
- A Case for Style
- Idiomatic Python
    - Principles: The Zen
    - Guidelines: PEP8
- Anti-patterns and Code Smells
    - Sloppiness
    - Wrong Language
    - Missing Python Features


:::



# A Case For Style

</br>

:::{.fragment}
As long as it works, why does it matter what it looks like?
:::

:::{.fragment}
What does work mean?
:::

:::{.r-stack}

::: incremental
- The inputs produce the expected outputs?
- The code is understandable?
- The code is easy to extend/debug?
:::

:::

# A Case for Style

</br>

:::{.r-stack}

```{python}
#| echo: false
#| output: true

import matplotlib.pyplot as plt
import numpy as np

with plt.xkcd():
    fig, ax = plt.subplots(1, 1)
    x_vals = np.arange(1, 100)
    y_vals = x_vals ** 1.1
    ax.plot(x_vals, y_vals)
    ax.set_xlabel('People who use the code')
    ax.set_ylabel("How much style matters")
    ax.set_xticks([])
    ax.set_yticks([])


plt.show()
```
:::



# The Zen of Python

```{python}
#| echo: false
#| output: asis

# This code block generates markdown for listing the zen of
# python.

from textwrap import dedent

zen_dict = {
    "1. Beautiful": "Beautiful is better than ugly.",
    "2. Explicit": "Explicit is better than implicit.",
    "3. Simple": "Simple is better than complex.\n\nComplex is better than complicated.",
    "4. Flat": "Flat is better than nested.",
    "5. Sparse": "Sparse is better than dense.",
    "6. Readable": "Readability counts.",
    "7. Consistent": "Special cases aren't special enough to break the rules.",
    "8. Pragmatic": "Although practicality beats purity.",
    "9. Correct": "Errors should never pass silently.\n\n Unless explicitly silenced.",
    "10. Unsurprising": "In the face of ambiguity, refuse the temptation to guess.",
    "11. Intuitive": (
        "There should be one-- and preferably only one -- obvious way to do it.\n\n"
        "Although that way may not be obvious at first unless you're Dutch."
        ""
    ),
    "12. Operational": "Now is better than never.",
    "13. Easy to Change": "Although never is often better than \*right\* now.",
    "14. Explainable": (
        "If the implementation is hard to explain, it's a bad idea.\n\n"
        "If the implementation is easy to explain, it may be a good idea."
    ),
    "15. Organized": "Namespaces are one honking great idea -- let's do more of those!",
}

print(":::{.r-stack}\n\n")

for i, v in zen_dict.items():
    print(":::{.fragment .fade-in-then-out}\n")
    print(':::{.callout-note appearance="simple"}\n')
    print(f"## {i}\n\n{v}\n")
    print(":::\n")
    print(":::\n")

print("\n:::\n")
```



## History of The Zen

::: {.columns}

::: {.column width="40%"}
![](images/tim.png)
:::

::: {.column width="60%"}
Tim Peters wrote the Zen of Python, which was officially adopted via a Python Enhancement Proposal
([PEP 20](https://peps.python.org/pep-0020/)) in 2004.

```python
import this
```

Tim also invented [Timsort](https://en.wikipedia.org/wiki/Timsort), a popular sorting algorithm used in many modern languages.
:::

:::



# Idiomatic Python

**Pythonic**: a coding style that leverages Python's unique features to write code that is readable and beautiful.

Pythonic code:

::: incremental

- Follows community guidelines
- Makes good use of python's features and libraries
- Is concise and readable
- Is easy to change

:::
