---
title: "Style Matters"
subtitle: "Grokking Pythonic"
execute:
  enabled: true
format:
    revealjs:
        slide-number: true
        preview-links: auto
        theme: [../../custom_slides.scss]
        css: ../../slides.css
        navigation-mode: vertical
        controls-layout: bottom-right
        controls-tutorial: true

footer: \
    <a href="https://opensourcecourse.dev/modules/style/overview.html">overview</a> /\
    <a href="https://github.com/opensourcecourse/opencourse/blob/main/modules/style/slides.qmd">source</a> /\
    <a href="https://opensourcecourse.dev/modules/style/exercises.html">exercises</a>
---

# Overview

:::{.r-stack}
- A Case for Style
- Idiomatic Python
    - Principles: The Zen
    - Guidelines: PEP8
- Anti-patterns and Code Smells
    - Sloppiness
    - Wrong Language
    - Missing Python Features


:::



# A Case For Style

</br>

:::{.fragment}
As long as it works, why does it matter what it looks like?
:::

:::{.fragment}
What does work mean?
:::

:::{.r-stack}

::: incremental
- The inputs produce the expected outputs?
- The code is understandable?
- The code is easy to extend/debug?
:::

:::

# A Case for Style

</br>

:::{.r-stack}

```{python}
#| echo: false
#| output: true

import matplotlib.pyplot as plt
import numpy as np

with plt.xkcd():
    fig, ax = plt.subplots(1, 1)
    x_vals = np.arange(1, 100)
    y_vals = x_vals ** 1.1
    ax.plot(x_vals, y_vals)
    ax.set_xlabel('People who use the code')
    ax.set_ylabel("How much style matters")
    ax.set_xticks([])
    ax.set_yticks([])


plt.show()
```
:::


# Idiomatic Python

**Pythonic**: a coding style that leverages Python's unique features to write code that is readable and beautiful.

Pythonic code:

::: incremental

- Follows community guidelines
- Makes good use of python's features and libraries
- Is concise and readable
- Is easy to change

:::



# The Zen

</br>

:::{.fragment .fade-in-then-out}

:::{.callout-note appearance="simple"}
1.
    Beautiful is better than ugly.
:::

:::

:::{.fragment .fade-in-then-out}
2. Explicit is better than implicit.
:::

:::{.fragment .fade-in-then-out}
3. Simple is better than complex.
   Complex is better than complicated.

:::



