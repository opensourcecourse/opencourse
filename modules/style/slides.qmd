---
title: "Style Matters"
subtitle: "Grokking Pythonic"
execute:
  enabled: true
format:
    revealjs:
        slide-number: true
        preview-links: auto
        theme: [../../custom_slides.scss]
        css: ../../slides.css
        navigation-mode: vertical
        controls-layout: bottom-right
        controls-tutorial: true

footer: \
    <a href="https://opensourcecourse.dev/modules/style/overview.html">overview</a> /\
    <a href="https://github.com/opensourcecourse/opencourse/blob/main/modules/style/slides.qmd">source</a> /\
    <a href="https://opensourcecourse.dev/modules/style/exercises.html">exercises</a>
---

# Overview

<br>

:::{.r-stack}
- A Case for Style
- Idiomatic Python
- Anti-patterns and Code Smells
:::



# A Case for Style

<br>

:::{.fragment}
As long as it works, why does it matter what it looks like?
:::

:::{.fragment}
What does work mean?
:::

:::{.r-stack}

::: incremental
- The inputs produce the expected outputs?
- The code is understandable?
- The code is easy to change/debug?
:::

:::



# A Case for Style

:::{.r-stack}
![](images/babel.png){width="600"}
:::



# A Case for Style

:::{.r-stack}
![](images/pillar_of_programming_purpose.png){width="500"}
:::



# Idiomatic Python

**Pythonic**: a coding style that leverages Python's features to make readable and beautiful software.

Pythonic code:

::: incremental

- Embodies Python's guiding principles (The Zen of Python, PEP 20)
- Follows community norms (PEP 8, PEP 257, black, etc.)
- Makes good use of python's features and libraries
- Is easy to change

:::



## History of The Zen

::: {.columns}

::: {.column width="40%"}
![](images/tim.png)
:::

::: {.column width="60%"}
Tim Peters wrote the Zen of Python, which was officially adopted via a Python Enhancement Proposal
([PEP 20](https://peps.python.org/pep-0020/)) in 2004.

```python
import this
```

Tim also invented [Timsort](https://en.wikipedia.org/wiki/Timsort), a popular sorting algorithm used in many modern languages.
:::

:::


## Side Note: What's a PEP? 

<br>

The Python programming language evolves through [Python Enhancement Proposals](https://peps.python.org/pep-0000/),
which provide a mechanism for public discussion and peer-review of language changes and new features. 

Surprisingly, not everyone on the internet agrees, and sometimes the discussions can get a bit heated and
deviate from civility. See the [Walrus Operator](https://peps.python.org/pep-0572/).



# The Zen of Python

<br>

:::{.callout-note appearance="simple"}
## 1. Beautiful
Beautiful is better than ugly.
:::


## Beautiful code:

Although beauty is subjective, [this so post](https://softwareengineering.stackexchange.com/a/207932) does a good job
to explain the main attributed of beautiful code, which includes:

- Clarity and Transparency

- Elegance

- Efficiency

- Aesthetics

It can take some time to develop the beautiful python taste. Study professional codes and keep programming.


# The Zen of Python

<br>


:::{.callout-note appearance="simple"}
## 2. Explicit
Explicit is better than implicit.
:::

## Explicit

<br>

Explicit code means the abstractions are conistent and clear. 
It doesn't mean everything is spelled out (you don't have to understand bytecode, 
assembly, or semiconductor physics for your code to be explicit). 


# The Zen of Python

<br>

:::{.callout-note appearance="simple"}
## 3. Simple
Simple is better than complex.\n\n Complex is better than complicated.
:::


## Simple 

<br>

Simple means the most direct (shortest lines of code, most readable) is preferred. This means avoiding
complex features when possible (i.e., dictionaries and numpy arrays are better than custom classes 
for simple cases.) However, sometime the correct behavior is complex, so complex code is unavoidable. 
In this case, it can just be keept as simple as possible (for the user).


# The Zen of Python

<br>

:::{.callout-note appearance="simple"}
## 4. Flat
Flat is better than nested.
:::


## Flat

<br>

Highly nested structures are complex, and they often require recursion to effectively navigate. 
This should be avoided when possible. In scientific computing, numpy operations are strongly
preferred over nested for loops, both for efficiency and readability.


# The Zen of Python

<br>

:::{.callout-note appearance="Simple"}
## 5. Sparse
Sparse is better than dense.
:::


## Concise

<br>

Sparsity means fewer things. Fewer classes, fewer functions, fewer parameters.  

:::{.callout-note appearance="Concise"}
"Perfection is achieved, not when there is nothing to add, but when there is nothing left to take away." 

-Antoine de Saint Exupéry
:::



# The Zen of Python

<br>

:::{.callout-note appearance="Simple"}
## 6. Readable
Readability counts.
:::


## Readable

<br>

Readability means code is optimized not just for a computer to understand, but for a developer to understand.
Documentation is a first class concern.

:::{.callout-note appearance="minimal"}
Any fool can write code that a computer can understand. 
Good programmers write code that humans can understand. 

– Martin Fowler"
:::


# The Zen of Python

<br>

:::{.callout-note appearance="simple"}
## 7. Consistent
Special cases aren't special enough to break the rules.
:::


## Consistent

<br>

Consistent means abstractions are clear and not full of special exceptions.
Software shouldn't be like the English language.



# The Zen of Python

<br>

:::{.callout-note appearance="simple"}
## 8. Pragmatic
Although practicality beats purity.
:::


## Pragmatic

<br>

Pragmatic means prioritizing functionality and usability over more esoteric concerns and
unlikely edge cases.



# The Zen of Python

<br>

:::{.callout-note appearance="simple"}
## 9. Correct
Errors should never pass silently.\n\n Unless explicitly silenced.
:::


## Correct

<br>

Errors should be raised unless the way to deal with them is obvious.


# The Zen of Python

<br>

:::{.callout-note appearance="simple"}
## 10. Unsurprising
In the face of ambiguity, refuse the temptation to guess.
:::

## Unsurprising

<br>

Guessing what a user may want when there are several viable choices is rarely a good idea.



# The Zen of Python

<br>

:::{.callout-note appearance="simple"}
## 11. Intuitive
There should be one-- and preferably only one -- obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
:::


## Intuitive

<br>

Intuitive software is best illustrated when doing new things seldom requires referencing
the documentation; the abstractions, object names, and APIs are such it is obvious how certain
things should be done.





## Intuitive


::: {.columns}

::: {.column width="40%"}
![](https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Guido_van_Rossum_OSCON_2006.jpg/800px-Guido_van_Rossum_OSCON_2006.jpg)
:::

::: {.column width="60%"}

<br>
Python's creator, [Guido Van Rossum](https://en.wikipedia.org/wiki/Guido_van_Rossum), is Dutch, hence
the inside joke in the PEP. 

As the old adage goes:

> [If you ain't Dutch, you ain't much](https://michaeljdouma.com/2019/07/07/a-brief-history-of-the-phrase-if-you-aint-dutch-you-aint-much/)

:::

:::


<br>
Python's creator, [Guido Van Rossum](https://en.wikipedia.org/wiki/Guido_van_Rossum), is Dutch, hence
the inside joke in the PEP. 

As the old adage goes:

> [If you ain't Dutch, you ain't much](https://michaeljdouma.com/2019/07/07/a-brief-history-of-the-phrase-if-you-aint-dutch-you-aint-much/)


# The Zen of Python

<br>

:::{.callout-note appearance="simple"}
## 12. Operational
Now is better than never.
:::


## Operational

<br>

Usually it is better to have something that works for 90% of the cases *now* than
a perfect program sometime in the distant future (which often means *never*).


# The Zen of Python

<br>

:::{.callout-note appearance="simple"}
## 13. Flexible
Although never is often better than \*right\* now.
:::


## Flexible

<br>

On the flip side, implementations that are too hastily done can be hard to change.
Especially when they must be maintained forever. Like an angry email to your boss,
some code is better left unwritten.


# The Zen of Python

<br>

:::{.callout-note appearance="simple"}
## 14. Explainable
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
:::


## Explainable

<br>
Working through a hard programming problem? Grab a friend, or a [rubber duck](https://en.wikipedia.org/wiki/Rubber_duck_debugging)
and explain your implementation. Often simpler approaches will surface.   


# The Zen of Python

<br>

:::{.callout-note appearance="simple"}
## 15. Organized
Namespaces are one honking great idea -- let's do more of those!
:::

## Organized

<br>

Coming from MATLab, I found having to import python modules annoying. Why is it `np.pi` rather than just `pi`?
Then, I created a variable named `pi` in a matlab finite element code which, of course, overwrote the 
expected value. It took me several hours to debug, but afterward I understood why namespaces are a "honking"
good idea.


# Python Style ([PEP 8](https://peps.python.org/pep-0008/))

<br>

* Python style-guide adopted in 2001
* Several guidelines to approach pythonic
* Originally just for the python source code, adopted more generally later


## Background

<br>

PEP8 is python's style guide. While originally only applicable to the standard library, it is now widely
considered good practice for (nearly) all python projects.

Here we explore a few of the more important aspects of PEP8, but you can find the whole 
thing [here](https://peps.python.org/pep-0008/).


# PEP 8: Line Lengths

<br>

* Limit line lengths to 79 characters
* Limit docstring lengths to 72 characters

:::{.callout-note}
Many modern formatting tools expand the line limit to around 90 characters.
:::




# PEP 8: [Imports](https://peps.python.org/pep-0008/#imports)

* Each import should be a single line
* Unless multiple objects are imported *from* the same module

```{.python filename="no"}
import numpy as np, scipy, matplotlib.pyplot as plt, sklearn

```
<br>
```{.python filename="yes"}
import matplotlib.pyplot as plt
import numpy as np
import scipy
import sklearn
from pandas import Series DataFrame
```


# PEP 8: [Imports](https://peps.python.org/pep-0008/#imports)

<br>

* Imports should be organized alphabetically

* Imports should be grouped by
  * module level dunders (`__future__`)
  * standard library 
  * external packages 
  * internal packages


::: footer
All of this isn't actually in PEP8, but generally accepted by many (e.g., the [CIA](https://wikileaks.org/ciav7p1/cms/page_26607631.html))
:::



# PEP 8: [Imports](https://peps.python.org/pep-0008/#imports)
<br>

```{.python code-line-numbers="1|3-4|6-7|9"}
from __future__ import annotations

import pathlib
from collections import defaultdict

import numpy as np
import matplotlib.pyplot as plt

from mylibrary.util import combobulate
```



# PEP 8: [Naming](https://peps.python.org/pep-0008/#naming-conventions)


:::{.incremental}

* i (single lowercase letter) - used for incremental variables.
* ALL_CAPITAL - used for constants
* CamelCase - used for classes
* snake_case - used for functions, methods, modules, variables ...
* Any name starting with _ is considered private
* `__` performs name mangling (usually a bad idea)
* In most cases, dunders should be avoided

:::


# PEP 8: [Naming](https://peps.python.org/pep-0008/#naming-conventions)

<br>

```python
myVariable = 10  # Not for python

my_variable = 10  # correct
```



# PEP 8: [Naming](https://peps.python.org/pep-0008/#naming-conventions)

<br>

```{.python code-line-numbers="1|3|5" filename=""}
from PoorlyNamedLibrary import *  # wrong! 

from mylibrary import the_thing_i_need  # better

import mylibrary  # even better (most the time)
```



# PEP 8: [Try/Except](https://peps.python.org/pep-0008/##programming-recommendations)

<br>

try/except clauses should:

:::{.incremental}
- Use a specific Exception types (where possible)
- Limit the logic in the try/except scope
:::


# PEP 8: [Try/Except](https://peps.python.org/pep-0008/##programming-recommendations) {auto-animate="true"}


```{.python filename="wrong"}
try:
    cool_function(my_inputs)
except: 
    pass
```

<br>

:::{.fragment}

```{.python filename="correct"}
try:
    cool_function(my_inputs)
except (ValueError, SpecificError): 
    pass
```

:::


# PEP 8: [Try/Except](https://peps.python.org/pep-0008/##programming-recommendations)


```{.python filename="wrong"}
try:
    value = collection[key]
    return handle_value(value)
except KeyError:
    return key_not_found(key)
```

<br>

:::{.fragment}

```{.python filename="correct"}
try:
    value = collection[key]
except KeyError:
    return key_not_found(key)
else:
    return handle_value(value)
```

:::


# PEP 8: [Membership](https://peps.python.org/pep-0008/##programming-recommendations) {auto-animate="true"}

Negative membership checks

```{.python filename="wrong"}
# Wrong
not "a" in my_dict
```

<br>

:::{.fragment}

```{.python filename="correct"}
# Correct
"a" not in my_dict
```

:::



# PEP 8: [Boolification](https://peps.python.org/pep-0008/##programming-recommendations) {auto-animate="true"}

Bool checks

<br>

```{.python}
# Wrongest
if my_var is True:
    ...
# Wronger
if my_var == True:
    ...
# Correct
if my_var:
    ...
```


# PEP 8: [Spacing](https://peps.python.org/pep-0008/#whitespace-in-expressions-and-statements) {auto-animate="true"}


```{.python filename="wrong"}
spam( ham[ 1 ], { eggs: 2 } )
```
<br>

:::{.fragment}

```{.python filename="correct"}
spam(ham[1], {eggs: 2})
```

:::



# PEP 8: [Spacing](https://peps.python.org/pep-0008/#whitespace-in-expressions-and-statements) {auto-animate="true"}

```{.python filename="wrong"}
bar = (0, )
```

<br>

:::{.fragment}

```{.python filename="correct"}
foo = (0,)
```

:::


# PEP 8: [Spacing](https://peps.python.org/pep-0008/#whitespace-in-expressions-and-statements) {auto-animate="true"}


```{.python filename="wrong"}
if x == 4 : print(x , y) ; x , y = y , x
```

<br>


:::{.fragment}

```{.python filename="correct"}
if x == 4: print(x, y); x, y = y, x
```

:::



# PEP 8: [Spacing](https://peps.python.org/pep-0008/#whitespace-in-expressions-and-statements) {auto-animate="true"}

```{.python filename="wrong"}
ham[lower + offset:upper + offset]
ham[1: 9], ham[1 :9], ham[1:9 :3]
ham[lower : : upper]
ham[ : upper]
```

<br>

:::{.fragment}

```{.python filename="correct"}
ham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]
ham[lower:upper], ham[lower:upper:], ham[lower::step]
ham[lower+offset : upper+offset]
ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]
ham[lower + offset : upper + offset]
```

:::

# PEP 8: [Spacing](https://peps.python.org/pep-0008/#whitespace-in-expressions-and-statements) {auto-animate="true"}


```{.python filename="wrong"}
x             = 1
y             = 2
long_variable = 3
```

<br>

:::{.fragment}

```{.python filename="correct"}
x = 1
y = 2
long_variable = 3
```

:::


# Understanding Check

<br>

```python
myVar = 10

class snake_class:
    '''A special class for snakes.'''
    __snake_type__="python"
    _my_list = [1,2,3]
    
    def SlitherAround(self ):
        return self._my_list[0 : 2]
        
```


# PEP 8: When to Ignore It?

:::{.callout-note appearance="minimal"}
A style guide is about consistency.
:::

When to ignore guidelines:

:::{.incremental}
- Makes the code less readable (for someone used to the guideline)
- Existing code follows a different style (or just clean it up!)
:::

  

# Style: Automation

<br> 

* Style should be enforced by each project
* Nitpicks are better taken from a bot
* Consistency is important!



# Style: Automation Tools

<br> 

* black, autopep8, pyflakes, isort, flake8 ...
* All tools can be bundled into [pre-commit](https://pre-commit.com/)
* recommendation: Try [shed](https://github.com/Zac-HD/shed)
* [ruff](https://github.com/charliermarsh/ruff) is also becoming popular



## Shed Installation

Shed can be installed with pip:

```bash
pip install shed
```

Then run it while in your repo with

```bash
shed
```



# Code Smells and Anti-patterns

<br>

Code smells and anti-patterns: style/design issues in code that works, but isn't
pythonic (elegant, efficient, readable, ...)


# Code Smell: Complexity


:::{.r-stack}
![](images/code_smell.png){width="590"}
:::



# Code Smell: Complexity {auto-animate="true"}

<br>

```{.python}
def my_func(arg_1):
    """ An Example over-indented function. """
    if isinstance(arg_1, int):
        if arg_1 > 0:
            if arg_1 < 20:
                for n in range(arg_1):
                    ...
```



## Code Smell: Complexity {auto-animate="true"}

<br>

```{.python}
def my_func(arg_1):
    """ Improvements with syntactic sugar """
    if isinstance(arg_1, int) and 0 < arg_1 < 20:
        for n in range(arg_1):
            ...
```



## Code Smell: Complexity {auto-animate="true"}

<br>

```{.python}
def _is_validate_arg(arg_1):
    """Validate arg_1 for use with my_func"""
    return isinstance(arg_1, int) and 0 < arg_1 < 20


def my_func(arg_1):
    """Improvement with new functions."""
    if _is_valid_arg(arg_1):
        for n in range(arg_1):
            ...
```



# Code Smell: Complexity

<br>

How to measure? 

:::{.incremental}
* lines per fuction/method/class/module
* number of indents (more rigorous: Cyclomatic complexity)
* number of symbols defined
* others? 
:::

  

# Code Smell: Complexity
<br>

Complexity Deodorant

:::{.incremental}

* Divide functionality into multiple functions
* Create abstractions (e.g., use/create classes)
* Syntactic sugar (make complexity more readable)

:::



# Code Smell: Readability {auto-animate="true"}

<br>
What does this do? 
```{python}
#| echo: true
def func(a, b=1, c=0):
    d = np.mean(a, c, keepdims=True)
    e = (a - d) ** b
    f = a.shape[c]
    return np.sum(e) / f
```

```{python}
#| echo: false

import numpy as np
from scipy.stats import moment

test_ar = np.random.rand(10)
assert np.allclose(func(test_ar, 1), moment(test_ar, 1))
assert np.allclose(func(test_ar, 2), moment(test_ar, 2))
assert np.allclose(func(test_ar, 0), moment(test_ar, 0))
```



## Code Smell: Readability {auto-animate="true"}

<br> 
Add meaningful names and docstring
```{python}
#| echo: true
def get_stats_moment(array, moment=1, axis=0):
    """Calculate the statistical moment."""
    mean = np.mean(array, axis, keepdims=True)
    demean_raised = (array - mean) ** moment
    sample_count = a.shape[c]
    return np.sum(demain) / sample_count
```



## Code Smell: Readability {auto-animate="true"}

<br> 
Even Better, use scipy! 
```{python}
#| echo: true
from scipy.stats import moment
```



# Code Smell: Readability {auto-animate="true"}

<br> 
Incomprehensible Comprehensions
```python
nested = [1, 2, 3, [2, 3], {1, 2, 3}]

[y for z in [x if isinstance(x, list) else[x] \
for x in nested] for y in z]
```

::: footer
https://github.com/wdm0006/incomprehensible
:::



## Code Smell: Readablity {auto-animate="true"}

<br> 
Break into different lines
```python
[
    y for z in 
    [
        x if isinstance(x, list) 
        else [x] 
        for x in nested
    ] 
    for y in z
]
```



## Code Smell: Readability {auto-animate="true"}

<br> 
Wrap in a function
```python
def unwrap_list(nested):
    """unwrap nested heterogeneous lists"""
    out = [
        y for z in
        [
            x if isinstance(x, list)
            else [x]
            for x in nested
        ]
        for y in z
    ]
    return out
```



## Code Smell: Readability {auto-animate="true"}

<br> 
If still unreadable, remove comprehension.
```python
def unwrap_list(nested):
    """unwrap nested heterogeneous lists"""
    out = []
    for element in nested:
        if isinstance(element, list):
            for sub_element in element:
                out.append(sub_element)
        else:
            out.append(element)
    return out
```


# Code Smell: Signatures

<br>

Signature: inputs and outputs of a callable (can include names and types)

Common problems:

:::{.increment}
* Too many arguments
* Variable output types
:::



# Code Smell: Too Many Inputs

<br>
Too many input parameters (probably need different functions)

```python
def do_stats(
    ar, 
    mean=True, 
    median=True, 
    std=True, 
    kurtosis=True,
    ...
):
    ...
```

## Code Smell: Too Many Inputs

:::{.caleout-note}
The largest signature I know of is [`pd.read_csv`](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html)
which, as of pandas 1.5.1, supports 51 arguments. Although it is not ideal, it is one of the most used function
in the python data ecosystem. Also, all but one of its parameters is optional, and keyword only arguments are used.
:::



# Code Smell: Multiple Return Types

<br>
Output changes based on parameters

```python
import numpy as np

def std(ar, axis=0, return_mean=True):
    """Calc std of array"""
    mean = np.mean(ar, axis=axis, keepdims=True)
    std_ar = np.sum((ar - mean) ** 2) / ar.shape[axis]
    if return_mean:
        return std_ar, mean
    else:
        return std_ar
```

# Code Smell: Multiple Return Types

<br>
None returned rather than raising an Error

```python
import numpy as np

def std(ar, axis=0):
    """Calc std of array"""
    mean = np.mean(ar, axis=axis, keepdims=True)
    std_ar = np.sum((ar - mean) ** 2) / ar.shape[axis]
    if np.any(np.isnan(std)):
        return None
    return std_ar
```


# Code Smell: Ignorance

Not using language/std lib features:

:::{.increment}
* iteration
* zip
* enumerate
* dict.get
* dict.items
* collections
* list comprehensions
:::



# Code Smell: Ignorance

<br>
Iteration (bad)

```python
some_list = [1, 2, 3]

for i in range(len(some_list)):
    val = some_list[i]
```



## Code Smell: Ignorance {auto-animate="true"}

<br>
Iteration (good)

```python
some_list = [1, 2, 3]

for val in some_list:
    ...
```



# Code Smell: Ignorance {auto-animate="true"}

<br>
Dual iteration (bad)
```python
list_1 = [1, 2, 3]
list_2 = [4, 5, 6]

list_len = min([len(list_1), len(list_2)])

for i in range(list_len):
    val_1 = list_1[i]
    val_2 = list_2[i]
```



## Code Smell: Ignorance {auto-animate="true"}

<br>
Dual iteration (good)
```python
list_1 = [1, 2, 3]
list_2 = [4, 5, 6]

for val_1, val_2 in zip(list_1, list_2):
    ...
```


# Code Smell: Ignorance

<br>
Enumeration (bad)

```python
some_list = [1, 2, 3]

count = 0
for val in some_list:
    count += 1
```



## Code Smell: Ignorance {auto-animate="true"}

<br>
Enumeration (bad) 

```python
some_list = [1, 2, 3]

for count, val in enumerate(some_list):
    ...
```



# Code Smell: Ignorance {auto-animate="true"}

<br>
Unsure keys (bad)

```python
some_dict = {1: 1, 2: 2}

if 3 in some_dict:
    val = some_dict[3]
else:
    val = 3
```



## Code Smell: Ignorance {auto-animate="true"}

<br>
Unsure keys (good)

```python
some_dict = {1: 1, 2: 2}

val = some_dict.get(3, 3)
```



# Code Smell: Ignorance {auto-animate="true"}

<br>
Key/value iteration (bad)

```python
some_dict = {1: 1, 2: 2}

for key in some_dict:
    value = some_dict[key]
```



## Code Smell: Ignorance {auto-animate="true"}

<br>
Key/value iteration (good)

```python
some_dict = {1: 1, 2: 2}

for key, value in some_dict.items():
    ...
```




# Code Smell: Ignorance {auto-animate="true"}

<br>
Nested dict (bad)

```python
key_dict = {}  # a dict of lists for storing outputs

# iterate key/value of data dict
for key, data in some_data.items():
    if key in key_dict:
        key_dict[key].append(value)
    else:
        key_dict[key] = [value]
```

::: footer
The [collections module](https://docs.python.org/3/library/collections.html) of the standard library is full of goodies. 
:::



## Code Smell: Ignorance {auto-animate="true"}

<br>
Nested dict (good)

```python
from collections import defaultdict

key_dict = defaultdict(list)  # a dict of lists for storing outputs

# iterate key/value of data dict
for key, data in some_data.items():
    key_dict[key].append(data)
```



# Code Smell: Ignorance {auto-animate="true"}

<br>
Queuing (bad)

```python
queue = [1, 2, 3]  # a poor man's queue

# pop last value off queue
last_value = queue.pop(-1)

# append to queue end
queue.append(4)
```



## Code Smell: Ignorance {auto-animate="true"}

Queuing (Good)

```python
from collections import deque
queue = deque([1, 2, 3])  # a proper queue

# pop last value off queue
last_value = queue.pop()

# append to queue end
queue.append(4)

# pop first value
first_value = queue.popleft()

# append to first value
queue.appendleft(-1)
```



## Code Smell: Ignorance {auto-animate="true"}

Other reasons not to use a list for a  queue? 



# Code Smell: Ignorance {auto-animate="true"}

<br>
Filtering list contents (bad)

```python
out = []  # get all even numbers < 100
for a in range(100):
    if a % 2 == 0:
        out.append(a)    
```


## Code Smell: Ignorance {auto-animate="true"}

<br>
Filtering list contents (good)

```python
out = [a for a in range(100) if a % 2 == 0]
```


# Summary

- Style matters
  - "This was written by a scientist!?"
- Remember the Zen
- Follow guidelines
- Code should smell nice
- Consistency