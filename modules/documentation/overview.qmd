---
title: Documentation
---
![](../../images/conspiracy_board.png)

:::{.callout-note appearance="minimal"}
Don't document the program; program the document.

\- Unknown
:::

[Video](https://www.youtube.com/watch?v=25jwO2_lAoI)

# Documentation
Documenting all software is important, but just like testing, selecting the appropriate level and strategy
depends on the type of software and its audience. For example, a simple script for producing a figure for a 
report will be documented very differently from a popular open-source library. It's not a coincidence 
that some of the most popular python packages are also the best documented. 
However, it's not the *volume* of documentation that counts, but *quality*.

Types of documentation include code comments, docstrings, readmes, tutorials, how tos, quickstarts, references, etc. 
Each one has its place.

# Objectives

In this module we will learn about:

1. Writing effective code comments (and code that needs less of them)
2. Python docstrings
3. Creating effective introduction/tutorial documentation
4. Technical references
5. Documentation build systems

# Reading

- [Best Practices for Code Comments](https://stackoverflow.blog/2021/12/23/best-practices-for-writing-code-comments/)
- [Example Numpy Docstring](https://github.com/numpy/numpy/blob/main/doc/example.py)
- [Write Better READMEs](https://github.com/banesullivan/README)

# Additional Resources

- [Docs or It Doesnt Exist](https://lukeplant.me.uk/blog/posts/docs-or-it-doesnt-exist/)
- [The Four Types of Documentation](https://nick.groenen.me/posts/the-4-types-of-technical-documentation/)
- [5 Comment Don'ts](https://www.itprotoday.com/development-techniques-and-management/5-code-commenting-donts)
- [How to Write Numpy Docstrings](https://python.plainenglish.io/how-to-write-numpy-style-docstrings-a092121403ba)
- [Sphinx](https://www.sphinx-doc.org/en/master/)
- [Quarto](https://github.com/quarto-dev/quarto-cli)
- [MKDocs](https://www.mkdocs.org/)
- [Read the Docs](https://readthedocs.org/)



