---
title: "Documentation"
subtitle: Document it or it doesn't exist
format:
    revealjs:
        slide-number: true
        preview-links: auto
        theme: [../../custom_slides.scss]
        css: ../../slides.css
        view-distance: 100
        mobile-view-distance: 100
        navigation-mode: vertical
        controls-layout: bottom-right
        controls-tutorial: true

footer: \
    <a href="https://opensourcecourse.dev/modules/documentation/overview.html">overview</a> /\
    <a href="https://github.com/opensourcecourse/opencourse/blob/main/modules/documentation/slides.qmd">source</a> /\
    <a href="https://opensourcecourse.dev/modules/documentation/exercises.html">exercises</a>
---


# What is it? 

Documentation is:

:::{.incremental}
- User's manual
- Blueprints
- Advertisements
- Sticky notes
- Textbook
- Prose
:::


  
# Documentation  Types

<br>

:::{.incremental}
- Code comments (in-line, block)
- Docstrings
- Readme
- Project documentation
:::



# Code Comments: In-Line {auto-animate="true"}

<br> 

Comments made on the same line as code. Should be separated with 2 spaces.

<br>

```python
extent = width + 1  # Accounts for screen boarder  
```



# Code Comments: In-Line {auto-animate="true"}

<br> 

Use sparingly. Explain why, not what.

<br>

```python
extent = width + 1  # add one to width  
```



# Code Comments: In-Line {auto-animate="true"}

<br> 

Don't use comments to mask other issues

<br> 

```python
x = 1.7  # Event magnitude  
```



# Code Comments: In-Line {auto-animate="true"}

<br> 

Don't use comments to mask other issues

<br> 

```python
event_magnitude = 1.7  
```



# Code Comments: Block  {auto-animate="true"}

<br>

:::{.incremental}

- One or more lines which starts with #
- A single space follows each #
- Can span many lines
- Should match indentation level of code

:::



# Code Comments: Block  {auto-animate="true"}
<br>

```python
# We loop over the data list here because the rows 
# can have different lengths which precludes using
# an array.
for row in data:
    ...
```


# Code Comments: Block  {auto-animate="true"}

<br>
Don't state the obvious

```python
# Loop over 0-9, add 42 and print.
for num in range(10):
    new_num = num + 42
    print(new_num)
```



## Code Comments: Block  {auto-animate="true"}

<br>

:::{.callout-note}
In some cases, it might actually help to explain what a groups of lines are doing
with a comment above them to help with "human parsability". But, it might also be
better to group these lines of code into a function with a descriptive name and
docsstring.
:::



# Code Comments: Block  {auto-animate="true"}

<br>
Explain/justify unorthodoxy  

```python
# Keep imports sorted this way to avoid circular
# imports between sub-modules
import .utils
import .processing
```



# Code Comments: Block  {auto-animate="true"}

<br>
Comment on attributes/variables meaning.

```python
# Planck's constant in m**2 kg / s
planck = 6.62607015e-34
```

::: footer
Although [pep 224](https://peps.python.org/pep-0224/) was rejected, placing a string literal
after an assignment is also popular. Using the attributes section on class or module docstring
is probably the best approach, however.
:::


# Code Comments: In the Wild
<br>

```python
class record(nt.void):
    """A data-type scalar that allows field
     access as attribute lookup.
    """
    # manually set name and module so that 
    # this class's type shows up as numpy.record 
    # when printed
    __name__ = 'record'
    __module__ = 'numpy'
```

:::footer
Example from [here](https://github.com/numpy/numpy/blob/bf20c55a2e464b183db54c280c3b327762c390af/numpy/core/records.py#L223-L230)
, reformatted to fit on screen.
:::


# Code Comments: In the Wild
<br>

```python
# GH#23758: We may still need to 
# localize the result with tz
# GH#25546: Apply tz_parsed first (from arg),
# then tz (from caller)
# result will be naive but in UTC
result = (
    result.tz_localize("UTC")
    .tz_convert(tz_parsed)
)
```

:::footer
Example from [here](https://github.com/pandas-dev/pandas/blob/502919e4b18e5d5aca584d4ebb84d663fcefffc9/pandas/core/tools/datetimes.py#L538-L541),
reformatted to fit on screen.
:::


# Understanding Check{auto-animate="true"}

How can we make this comment better?

```python
import numpy as np

if __name__ == "__main__":
    # Create sin array with given amplitude and frequency
    dt = 1. / 1_000
    time = np.arange(1_000) * dt
    amplitude = 10  # amplitude
    frequency = 10  # frequency in Hz
    sin_data = amplitude * np.sin(2.0 * np.pi * frequency * time)
```



# Understanding Check{auto-animate="true"}

Delete it!

```python
import numpy as np

def make_sin_array(dt, samples, amplitude, frequency):
    """Create a sin wave.
    ...
    """
    time = np.arange(samples) * dt
    sin_data = amplitude * np.sin(2.0 * np.pi * frequency * time)
    return sin_data

if __name__ == "__main__":
    sin_array = make_sin_array(1/1_000, 1000, 10, 10)

```




# Docstrings  {auto-animate="true"}

<br>

Docstrings follow functions, methods, modules, classes, etc.
They explain the purpose and use of the code.

<br>

```python
def recombobulate(bob, bits):
    """Put Bob and bits back together"""
```



# Docstrings  {auto-animate="true"}

<br>

docstrings are accessed via `__doc__`

<br>

```python
def recombobulate(bob, bits):
    """Put Bob and bits back together"""

print(recombobulate.__doc__)
```



# Docstrings  {auto-animate="true"}

<br>

Ideal public (doesn't start with _) docstrings:

:::{.incremental}
- Start with a single line description
- Describe the input parameters
- Describe the output parameters (when needed)
- Provide an example
:::



# Docstrings  {auto-animate="true"}
<br>

There are several common flavors of docstrings

- Numpy
- ReST
- Google
- Just markdown (I wish)



# Docstrings: Numpy

<br>


:::{.incremental}

- Most common docstring style for scientific/machine learning codes
- More human readable than some other styles
- Uses several sections underscored by -----
- Examples section uses standard [doctest format](https://docs.python.org/3/library/doctest.html)

:::

::: footer
See the [numpydoc](https://numpydoc.readthedocs.io/en/latest/format.html) site for more details on numpy flavored
docstrings.
:::


# Docstrings: Numpy  {auto-animate="true"}


```{.python code-line-numbers="1||2|3-9|11-13|15-17"}
def recombobulate(bob, bits=None):
    """Create new Bob with bits put back.
    
    Parameters
    ----------
    bob : Bob
        The Bob object which was discombobulated.
    bits : Bits, Optional
        The Bob bits which fell off.
    
    Returns
    -------
    A new Bob object without missing bits. 
        
    Examples
    --------
    >>> new_bob = recombobulate(bob, bits)
    """
```



# Docstrings: Numpy  {auto-animate="true"}


```{.python code-line-numbers="1||1-4||"}
def recombobulate(
    bob: Bob,
    bits: None | Bits = None,
) -> Bob:
    """Create new Bob with bits put back.

    Parameters
    ----------
    bob
        The Bob object which was discombobulated.
    bits
        The Bob bits which fell off.

    Examples
    --------
    >>> new_bob = recombobulate(bob, bits)
    """
```

# Docstrings: Doctests

```{.python code-line-numbers="1||2|4-5|6-7|8-11"}
def factorial(n):
    """Return the factorial of n, an exact integer >= 0.

    >>> factorial(30)
    265252859812191058636308480000000
    >>> [factorial(n) for n in range(6)]
    [1, 1, 2, 6, 24, 120]
    >>> factorial(-1)
    Traceback (most recent call last):
        ...
    ValueError: n must be >= 0
    """
```

::: footer
This example comes from the [doctest documentation](https://docs.python.org/3/library/doctest.html)
:::



# Docstrings: Doctests

Directives

<br>

```{.python}
"""
>>> print(list(range(20)))  # doctest: +NORMALIZE_WHITESPACE
[0,   1,  2,  3,  4,  5,  6,  7,  8,  9,
10,  11, 12, 13, 14, 15, 16, 17, 18, 19]
"""
```

:::footer
This example comes from the [doctest documentation](https://docs.python.org/3/library/doctest.html)
:::




# Docstrings: Doctests

Directives

<br>

```{.python}
"""
>>> print(list(range(20)))  # doctest: +ELLIPSIS
[0, 1, ..., 18, 19]
"""
```

:::footer
This example comes from the [doctest documentation](https://docs.python.org/3/library/doctest.html)
:::




# Docstrings: Doctests

<br>
Example can (and should) be run to make sure it still works. 
Pytest does this:

<br>

```bash
pytest --doctest-modules
```


# Docstrings: Tips

<br>

:::{.incremental}
- Use a spell checker
- Use complete sentences
- Try to be empathic, try to be a friend
- It's fine if the docstring is longer than the code
- Typehints are good too, don't be redundant
:::


# Understanding Check

What's wrong here? 

```{.python}
def my_func(thing_a, thing_b):
    """
    
    Parameters
    ----------
    thing_a
        The first thing 
    """
```


# Understanding Check

<br>

When to use a comment vs a docstring?



# Readme

Your project's elevator pitch / note in a bottle

:::{.incremental}

- Concise
- Talk is cheap, show code right away
- Describe basic functionality/features
- After 2 minutes readers should:
    - Know if the library might solve their problem
    - See an example
    - Know if the code is well used/maintained (badges)
:::


# Project Documentation


:::{.incremental}
- Supplement/explain the codebase
- Are written in ReST, Markdown, or notebooks
- Usually compiled to HTML/PDF
- Can include:
    - Readme
    - Tutorials
    - Technical references
    - How to guides
    - ...
:::





# Diátaxis


![](https://diataxis.fr/_images/diataxis.png)


::: footer
Read more on  the [Diátaxis website](https://diataxis.fr/).
:::



# Tutorials
Take the reader through a series of steps (learning-oriented).

:::{.incremental}
- Get the user started
- Provide a complete picture at the start
- Ensure that the tutorial works reliably
- Ensure the user sees results immediately
- Describe concrete steps, not abstract concepts
- Offer only minimum, necessary, explanation
- Ignore options and alternatives
:::



# How tos
Walk the reader through solving a real-world problem (goal-oriented).

:::{.incremental}
- Solve a problem
- Don't explain concepts
- Are flexible
- Omit unnecessary info
- Are well named
:::



# References
Technical descriptions of the machinery and how to operate it (information-oriented).

:::{.incremental}
- Are consistent
- Do nothing but describe
- Provide examples
- Is accurate
- "One hardly reads reference material; one consults it."
- Most common reference: API documentation
:::


# Explanation
Clarifies and illuminates a particular topic (understanding-oriented).

:::{.incremental}
- Makes connections
- Provides context
- Talk *about* the subject
- Discuss alternatives and opinions
- Doesn't instruct or provide technical reference
- Example: theory / design decisions
:::



# Advice

<br>

:::{.incremental}

- Don't cross the streams! Try to keep each doc type separate but add links where needed.
- Ensure code is executed when building docs (when possible)
- Have someone who doesn't know the library review the docs

:::


# Building and Hosting Docs

<br>

The most common libraries for building python docs:

- [sphinx](https://www.sphinx-doc.org/en/master/)
- [mkdocs](https://www.mkdocs.org/)
- [quarto](https://quarto.org/)

The pages can be hosted on readthedocs, githubpages, netlify, or elsewhere.



# Virtual Field Trip

<br>
With a partner, checkout two  of these project's readmes:

:::: {.columns}

::: {.column width="40%"}
- [TQDM](https://github.com/tqdm/tqdm)
- [fastapi](https://github.com/tiangolo/fastapi)
- [textual](https://github.com/Textualize/textual)
- [rocketry](https://github.com/Miksus/rocketry)
- [distinctipy](https://github.com/alan-turing-institute/distinctipy)
:::

::: {.column width="60%"}
- [awkward](https://github.com/scikit-hep/awkward)
- [pytest-codeblocks](https://github.com/nschloe/pytest-codeblocks)
- [svglue](https://github.com/mbr/svglue)
- [sktime](https://github.com/sktime/sktime)
- [pooch](https://github.com/fatiando/pooch)
:::

::::



