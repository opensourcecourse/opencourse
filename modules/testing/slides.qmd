---
title: "Testing"
subtitle: How else do we know it works?
format:
    revealjs:
        slide-number: true
        preview-links: auto
        theme: [../../custom_slides.scss]
        css: ../../slides.css
        view-distance: 100
        mobile-view-distance: 100
        navigation-mode: vertical
        controls-layout: bottom-right
        controls-tutorial: true

footer: \
    <a href="https://opensourcecourse.dev/modules/testing/overview.html">overview</a> /\
    <a href="https://github.com/opensourcecourse/opencourse/blob/main/modules/testing/slides.qmd">source</a> /\
    <a href="https://opensourcecourse.dev/modules/testing/exercises.html">exercises</a>
---


# Motivation {auto-animate="true" visibility="uncounted"}

<br>

```{python}
#| echo: true
#| eval: false

def add(thing1, thing2):
    """A function to add things."""
    return thing1 + thing2
```
<br>

:::{.fragment}
Does it work?
:::

:::{.fragment}
Is it correct?
:::

:::{.fragment}
How can we prove it?
:::


# Motivation {auto-animate="true" visibility="uncounted"}

<br>

```{python}
#| echo: true
#| eval: false

def add(thing1, thing2):
    """A function to add things."""
    return thing1 + thing2

out = add(1, 1)
```



# Motivation {auto-animate="true" visibility="uncounted"}

<br>

```{python}
#| echo: true
#| eval: false

def add(thing1, thing2):
    """A function to add things."""
    return thing1 + thing2

out = add(1.0, 1)
```



# Motivation {auto-animate="true" visibility="uncounted"}

<br>

```{python}
#| echo: true
#| eval: false

def add(thing1, thing2):
    """A function to add things."""
    return thing1 + thing2

out = add(1.0, '1')
```



# Motivation {auto-animate="true" visibility="uncounted"}

<br>

```{python}
#| echo: true
#| eval: false

def add(thing1, thing2):
    """A function to add things."""
    return thing1 + thing2

out = add([1.0, 2.0], 1.0)
```


<!-- Code planes: analogy for different testing types -->


# Code Planes: Desired Behavior

```{python}
#| echo: false
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import axes3d

plt.rcParams.update({
    "figure.facecolor":  (0.0, 0.0, 0.0, 0.0),  # red   with alpha = 30%
    "axes.facecolor":    (0.0, 1.0, 0.0, 0.0),  # green with alpha = 50%
    "savefig.facecolor": (0.0, 0.0, 1.0, 0.0),  # blue  with alpha = 20%
})

x, y, z = axes3d.get_test_data(0.03)


def plot_wireframe(X, Y, Z, ax=None, color='blue', alpha=0.5, label=None):
    if ax is None:
        fig = plt.figure(figsize=(15,15))
        ax = fig.add_subplot(projection='3d')
        ax.set_axis_off()
        fig = plt.figure()

    if np.array(Z).shape != X.shape:
        Z = np.ones_like(X) * Z

    # Plot a basic wireframe.
    ax.plot_wireframe(
        X, Y, Z, rstride=10, cstride=10, color=color, alpha=alpha, label=label,
    )

    return ax
```


:::{.absolute top=-200 left=20}

```{python}
#| echo: false

ax = plot_wireframe(x, y, np.median(z), color='blue', label='desired behavior')
plt.show()
```

:::



# Code Planes: Actual Behavior

:::{.absolute top=-200 left=20}

```{python}
#| echo: false

ax = plot_wireframe(x, y, z, color='red', label='actual behavior')
plt.show()
```

:::



# Testing Taxonomy

::: {.columns}

::: {.column width="50%"}

**Testing** [Domains]{.red-bold-text}

(What the planes mean)

:::{.incremental}

- Unit
- Integration
- End to End

:::

:::

::: {.column width="50%"}

**Testing** [Approaches]{.blue-bold-text}

(How we measure residuals)

:::{.incremental}

- Point
- Property
- Mutation
- Manual
- Mathmatical

:::

:::

:::

# Testing [Domains]{.red-bold-text}: Unit

<br>

:::{.incremental}

- Small chunk of code
- Single function or method
- Fast to write

:::