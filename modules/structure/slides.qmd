---
title: "Organizing Python Projects"
subtitle: "A Structured Approach"
execute:
  enabled: false
format:
    revealjs:
        slide-number: true
        preview-links: auto
        theme: [../../custom_slides.scss]
        css: "../../slides.css"
        view-distance: 100
        mobile-view-distance: 100
        navigation-mode: vertical
        controls-layout: bottom-right
        controls-tutorial: true
        embed-resources: true
        mermaid:
            theme: default

footer: \
    <a href="https://opensourcecourse.dev/modules/structure/overview.html">overview</a> /\
    <a href="https://github.com/opensourcecourse/opencourse/blob/main/modules/structure/slides.qmd">source</a> /\
    <a href="https://opensourcecourse.dev/modules/structure/exercises.html">exercises</a>
---

# Outline

:::{.incremental}

- Libraries
- Services
- Applications
- Science Repository

:::

# Libraries 

:::{.incremental}

- Target Audience: Python coders
- Libraries are imported and used in other codes
- Used via an Application Programming Interface (API) 

:::


# Libraries 

Key Components:

:::{.incremental}

- modules (directories with `__init__.py`)
- [pyrpoject.toml](https://github.com/d-chambers/dbscan1d/blob/master/pyproject.toml)
- tests
- License
- README
- pyproject.toml

:::


# Library Structure

DBScan1D example:

```{.stretch}
dbscan1d
├── src
│   └── dbscan1d
│       ├── __init__.py
│       ├── version.py
│       ├── core.py
│       └── utils.py
├── tests
│   ├── test_core.py
│   └── test_utils.py
├── LICENSE.txt
├── README.md
└── pyproject.toml
```


# Libraries: Build systems

- Build systems are separated from installation 
  - [Poetry](https://python-poetry.org/)
  - [Flit](https://flit.pypa.io/en/stable/)
  - [SetupTools](https://packaging.python.org/en/latest/tutorials/installing-packages/)
  - [Hatch](https://github.com/pypa/hatch)

:::{footer}
There has been [recent discussions](https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/)
about why there are so many ways to do things.
:::


# Libraries: Extras

:::{ .incremental }
- docs
- github config files (.github)
  - actions
  - templates
- .ini files
- various configurations
:::


# Libraries: Tips

:::{.increment}

- Write the readme (and maybe a tutorial) before coding
- Write tests as you develop
- Use pre-commit
- Setup CI with github actions
- Consider using a template:
    - [option 1](https://github.com/ionelmc/cookiecutter-pylibrary)
    - [option 2](https://github.com/vikpe/python-package-starter)

:::


# Services

Long-running service, usually part of a web-application

:::{.incremental}
- Communicate with ReST, RPC, Sockets, GraphQL, etc.
- Use a framework (fast API, django rest framework, etc.)
- Containerization makes deployment easier
- Follow a guide for setup (lots to get wrong)
:::


# Applications

Designed for people (not code)

:::{.incremental}
- Graphical User Interface (GUI)
- Web application
- Command-line tool
- 

:::


