---
title: "Git Good (Enough)"
subtitle: A graphical introduction to Git
execute:
  enabled: false
format:
    revealjs:
        slide-number: true
        preview-links: auto
        theme: [../../../custom_slides.scss]
        css: "../../../slides.css"
        view-distance: 100
        mobile-view-distance: 100
        navigation-mode: vertical
        controls-layout: bottom-right
        controls-tutorial: true
        embed-resources: true
        mermaid:
            theme: default

footer: \
    <a href="https://opensourcecourse.dev/osc_intro/modules/git/overview.html">overview</a> /\
    <a href="https://github.com/opensourcecourse/opencourse/blob/main/osc_intro/modules/git/slides.qmd">source</a> /\
    <a href="https://opensourcecourse.dev/osc_intro/modules/git/exercises.html">exercises</a>
---



# The Problem with Git Tutorials

::: {.r-stack}
![](images/thought_tools.png)
:::


# Git Graphs

<br>

::: {.r-stack}

```{mermaid}
%%| fig-width: 11
gitGraph
   commit
   commit
   branch develop
   checkout develop
   commit
   commit
   checkout main
   merge develop
   checkout develop
   commit
   commit
   checkout main
   commit
   branch fix_1
   commit
   commit
   checkout main
   merge fix_1
   commit
   checkout develop
```

:::


# Git Graphs: Setup {.nostretch auto-animate="true" visibility="uncounted"}


:::{.midsize}
Scenario
:::

::: incremental

- We have just created an empty directory
- We are going to write some code
- Then make some changes
- and manage it all with git

:::


# Git Graphs {.nostretch auto-animate="true" visibility="uncounted"}

First we *init* the repo, then create a new file.

<br>

```{.python filename="myscript.py"}
def add_numbers(num1, num2):
    """Add two things together"""
    answer = num1 + num2
    print(f"{num1} + {num2} is {answer}")

add_numbers(2, 2)
```



## Git init

The [init](https://git-scm.com/docs/git-init) creates a new repo in the specified directory.

```bash
# Create a repo from scratch
mkdir new
git init new

# or leave off the path for current directory
cd new
git init
```



# Git Graphs: Add {.nostretch auto-animate="true" visibility="uncounted"}

We *add* modified files so git knows we may want to save them.

:::{.callout-warning appearance="minimal"}

< myscript.py >

[+1] [def add_numbers(num1, num2):]{style="color: green;"}

[+2]    ["""Add two things together"""]{style="color: green;"}

[+3]    [answer = num1 + num2]{style="color: green;"}

[+4]    [print(f"{num1} + {num2} is {answer}")]{style="color: green;"}

[+5]

[+6] [add_numbers(2, 2)]{style="color: green;"}
:::


## Git Add

The [add](https://git-scm.com/docs/git-add) command stages files, which means they are marked to be saved.

```bash
# add particular file
git add myscpript.py

# add all files
git add -A

# add all python files
git add *.py

# add all files in a folder
git add my_folder
```



# Git Graphs: Commit {.nostretch auto-animate="true" visibility="uncounted"}

Then *commit* to saving them. Note the Tag.

:::{.callout-tip appearance="minimal"}

[9d6b7c...]  < myscript.py >

[+1] [def add_numbers(num1, num2):]{style="color: green;"}

[+2]    ["""Add two things together"""]{style="color: green;"}

[+3]    [answer = num1 + num2]{style="color: green;"}

[+4]    [print(f"{num1} + {num2} is {answer}")]{style="color: green;"}

[+5]

[+6] [add_numbers(2, 2)]{style="color: green;"}
:::



## Git Commit

The [commit](https://git-scm.com/docs/git-commit) command saves the changes we added (staged).
Add a message in the commit command or an editor will open automatically.

```bash
# commit staged changes with a simple message
git commit -m "simple message"

# add all changes to previously committed files
# but wont add new files
git commit -am "simple message"
```



# Git Graphs: Commit {auto-animate="true" visibility="uncounted"}

This creates our first commit (dot) on the default branch (main).

"HEAD" refers to the latest commit on the current branch.

<br>

```{mermaid}
%%| fig-width: 4
gitGraph
   commit id: "9d6b7c"
```



## Commit Hash

The structure of the full commit HASH:

:::{.callout-tip appearance="minimal"}

6fd21da172fa169568a996bc2c7e97461bec7110

:::

A very long string of hexadecimal numbers (0-9 and a-f)

Fortunately, you can reference a commit with a few of the left characters:

:::{.callout-tip appearance="minimal"}

6fd21d

:::



# Git Graphs: Commit {.nostretch auto-animate="true" visibility="uncounted"}

Each commit has metadata.

:::{.callout-tip appearance="minimal"}
## [9d6b7c...] (HEAD, main)

Author:

    Derrick Chambers
    <d-chambers@users.noreply.github.com>

Date:

    >Mon Sep 26 20:11:10 2022 -0600

Message:

    work on myscript
...
:::




## Git Show {.nostretch auto-animate="true" visibility="uncounted"}

The [show](https://git-scm.com/docs/git-show) can be used to see metadata about a commit

```bash
# show metadata about 9d6b7c and its diff
git show 9d6b7c

# suppress the diff
git show --quiet 9d6b7c
```



# Git Graphs: Modify {.nostretch auto-animate="true"}

Next, we make some changes.

<br>

```{.python filename="myscript.py"}
def add_numbers(num1, num2):
    """Add two things together"""
    answer = num1 + num2
    print(f"{num1} + {num2} is {answer}")

add_numbers(2, 2)
```



# Git Graphs: Modify {.nostretch auto-animate="true"}

Next, we make some changes.

<br>

```{.python filename="myscript.py"}
def add_numbers(num1, num2):
    """Add two things together"""
    return num1 + num2

assert add_numbers(1, 1) == 2
```



# Git Graphs: Diff {.nostretch auto-animate="true" visibility="uncounted"}

Then *diff* to see difference between saved and current state.

:::{.callout-warning appearance="minimal"}
< myscript.py >

[-3]    [answer = num1 + num2]{style="color: red;"}

[-4]    [print(f"{num1} + {num2} is {answer}")]{style="color: red;"}

[-6]    [print(f"{num1} + {num2} is {answer}")]{style="color: red;"}

[+3]    [return num1 + num2]{style="color: green;"}

[+5]    [assert add_numbers(1, 1) == 2]{style="color: green;"}
:::



## Git Diff

The [diff](https://git-scm.com/docs/git-diff) commands shows changes between commits, files, branches, etc.

```bash
# diff between last commit and unstaged changes
git diff

# diff between two commits
git diff 9d6b7c 046a7a

# diff between a file on latest commit for
# two different branches
git diff main:myscript.py branch_1:myscript.py
```



# Git Graphs: Add (again) {.nostretch auto-animate="true"}

Then add the changes.

:::{.callout-warning appearance="minimal"}

< myscript.py >

[-4 answer = num1 + num2]{style="color: red;"}

[-5 print(f"{num1} + {num2} is {answer}")]{style="color: red;"}

[-7 add_numbers(2, 2)]{style="color: red;"}

[+3 return num1 + num2]{style="color: green;"}

[+5 assert add_numbers(1, 1) == 2]{style="color: green;"}
:::




# Git Graphs: Commit (again) {.nostretch auto-animate="true"}

And finally *commit* them.

:::{.callout-tip appearance="minimal"}

## [046a7a]

< myscript.py >

[-4 answer = num1 + num2]{style="color: red;"}

[-5 print(f"{num1} + {num2} is {answer}")]{style="color: red;"}

[-7 add_numbers(2, 2)]{style="color: red;"}

[+3 return num1 + num2]{style="color: green;"}

[+5 assert add_numbers(1, 1) == 2]{style="color: green;"}
:::



# Git Graphs {.nostretch auto-animate="true"}

Which adds a new commit to our main branch.

<br>

```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
```


# Knowledge Check {.nostretch auto-animate="true"}
<br>
```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
```

::: incremental
- What is main?
- What is 046a7a?
- What information does it contain?
- What commit does "HEAD" refer to?
:::



# Git Graphs: Branch {.nostretch auto-animate="true"}

We can create *branches* with their own commits

(think parallel universe)

<br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch branch_1
   commit id: "2-a577878"
   commit id: "3-c17d954"
```



## Git Branch
The [branch](https://git-scm.com/docs/git-branch) command is used to see, create, and destroy branches.

```bash
# list local branches
git branch

# list all branches (local and remote)
git branch -a

# create a new branch
git branch new_branch

# delete a branch
git branch --delete new_branch
```



# Git Graphs: Merge {.nostretch auto-animate="true"}

Then merge branches (e.g., back into main)

<br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "1-046a7a"
   branch branch_1
   commit id: "4c0f818"
   commit id: "221d22"
   checkout main
   merge branch_1
```



## Git Merge

The [merge](https://git-scm.com/docs/git-merge) command joins branches together.

```bash
# ensure current branch is main
# or HEAD is latest commit of main
git checkout main

# merge branch_1 into current branch
git merge branch_1
```


# Git Graphs: Merge {.nostretch auto-animate="true"}

Which has the same effect (on the code) as committing on main

<br>

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```


# Git Graphs: Merge {.nostretch auto-animate="true"}

But what if changes are made on main before the merge?

<br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch branch_1
   commit id: "4c0f818"
   commit id: "221d22"
   checkout main
   commit
   commit
```


# Git Graphs: Merge {.nostretch auto-animate="true"}

We can still merge branch_1 into main but....

there might be *conflicts*

<br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch branch_1
   commit id: "4c0f818"
   commit id: "221d22"
   checkout main
   commit
   commit
   merge branch_1
```



# Git Graphs: Merge {.nostretch auto-animate="true"}

What should happen if the changes aren't compatible?

:::{.r-stack}

:::{.fragment .fade-in-then-out}
- Prioritize changes on main?
- Prioritize changes on branch_1?
- Make the merger sort it out?
:::

:::{.fragment .fade-in-then-out}
 **Make the merger sort it out!**
:::


:::{.fragment}
![](images/bat_smack.avif)
:::

:::



## Git Conflicts

Dealing with conflicts isn't fun (in git or life). Here are a few commands that might help.

<br>

```bash
# abort merge (after conflicts show up)
git merge --abort

# list files with merge conflicts
git diff --name-only --diff-filter=U --relative
```

<br>
[When all else fails](https://xkcd.com/1597/)





# Git Graphs: Conflicts {.nostretch auto-animate="true"}

Example: myscript.py on main

<br>

```{.python filename="myscript.py (main)"}
"""
A script to practice using functions.

A brilliant script written by Derrick.
"""
...
```



# Git Graphs: Conflicts {.nostretch auto-animate="true"}

Example: myscript.py on branch_2

<br>

```{.python filename="myscript.py (branch_2)"}
"""
A script to practice using functions.

A really dumb script written by Peiyao.
"""
...
```



# Git Graphs: Conflicts {.nostretch auto-animate="true"}

myscript.py after merge command

<br>

```{.python filename="myscript.py (merge conflict)" code-line-numbers="|3-6|6-8"}
"""
A script to practice using functions.

<<<<<<< HEAD
A brilliant script written by Derrick.
=======
A really dumb script writen by Peiyao.
>>>>>>> branch_2
"""
...
```



# Git Graphs: Conflicts {.nostretch auto-animate="true"}

Next, manually edit myscript.py so it is correct

<br>

```{.python filename="myscript.py (resolved)" code-line-numbers="4"}
"""
A script to practice using functions.

A brilliant script written by Derrick.
"""
...
```



# Knowledge Check {.nostretch auto-animate="true"}
<br>

Now that we have fixed the file:

::: incremental
- What do we need to do next?
- And after adding the changes?
- What would be a good message for this commit?
:::




# Git Graphs: Tag {.nostretch auto-animate="true"}

Commits can be be *tagged* (usually with a version)

<br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a" tag: "v1.0.0"
   commit id: "4c0f818"
   commit id: "221d22" tag: "v1.1.0"
```

## Git Tag

[Tag](https://git-scm.com/book/en/v2/Git-Basics-Tagging) is like adding an alias to refer to a commit
with a shorter string. Usually, but not always, tags are used for versioning.

```bash
# list tags
git tag

# tag HEAD with version number
git tag v1.0.1

# Tag head with version, add annotation
git tag -a v1.0.1 -m "my favorite version"

# Show info about tags
git show v1.0.1
```


# Git Graphs: Cherry-Pick {.nostretch auto-animate="true"}

Commits can be *Cherry-Picked*

<br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   checkout main
   commit id: "4c0f818"
   commit id: "221d22"
```



# Git Graphs: Cherry-Pick {.nostretch auto-animate="true"}

Commits can be *Cherry-Picked*

<br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   checkout main
   commit id: "4c0f818"
   commit id: "221d22"
   commit id: "dc12a2"
```



## Git Cherry-Pick

The [cherry-pick](https://git-scm.com/docs/git-cherry-pick) command allows you to apply as single
commit (from any branch) to HEAD. Watch out though, you can still get conflicts.

```bash
# Make sure HEAD is the last commit on main branch
git checkout main

# cherry pick a commit from a different branch to main
git cherry-pick 221d227eea

```



# Git Graphs: Rebase {.nostretch auto-animate="true"}

Branches can be *rebased*

<br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   checkout main
   commit id: "4c0f818"
   commit id: "221d22"
```



# Git Graphs: Rebase {.nostretch auto-animate="true"}

Branches can be *rebased*.

<br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```



## Git Rebase
The [rebase](https://git-scm.com/docs/git-rebase) command changes the starting point of a branch.
MIt is often used to bring changes back into a feature branch from the main branch.

Rebase changes the git history. Make sure no one else is working on the branch before rebasing.

```bash
# navigate to a feature branch
git checkout branch_1

# apply all the missing main commits from main
# onto branch_1
git rebase main
```



# Git Graphs: Reset {.nostretch auto-animate="true"}

HEAD can be *reset*, keeping or discarding commits/unsaved changes.


```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```



## Git Rest
The [reset](https://git-scm.com/docs/git-reset) command cab be used to undo commits or staging.

```bash
# Undo git add
git reset

# Erase all unsaved changes
git reset --hard

# Remove last three commits, keep changes as staged
git reset --soft HEAD~3
```



# Git Graphs: Reset Soft {.nostretch auto-animate="true"}

Soft *reset*

```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "Unsaved" type: HIGHLIGHT
```



# Git Graphs: Reset Hard {.nostretch auto-animate="true"}

Hard *reset*

```{mermaid}
%%| fig-width: 4
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
```

:::{.fragment}

:::{.callout-caution .fragment}
All commits and unsaved work after "046a7a" really are gone...
:::

:::



# Git Graphs: Reset Hard {.nostretch auto-animate="true"}

Hard *reset*

::: {.r-stack}

![](images/hes-dead-jim.jpg)

:::



# Git Graphs: Squash {.nostretch auto-animate="true"}

Commits can be *squashed* (combined)

<br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```



# Git Graphs: Squash {.nostretch auto-animate="true"}

Commits can be *squashed* (combined)

<br>

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "ab3b7c"
   commit id: "046a7a" type: REVERSE
   commit id: "4c0f818" type: REVERSE
   commit id: "221d22" type: REVERSE
```



## Git Squash
There actually isn't a squash command, but a few ways to
[squash commits together](https://stackoverflow.com/questions/5189560/how-do-i-squash-my-last-n-commits-together)

```bash
# squash last 3 commits with reset
git reset --soft HEAD~3
git commit -m "squashed last 3 commits"
```



# Git Distributed Graphs {.nostretch auto-animate="true"}

Git is a *distributed* version control system

This means it can interact with remote copies of the repository (like one hosted by github).

Remote repos have names, like "origin" (think github).



# Git Graphs: Clone {.nostretch auto-animate="true"}

Git can *clone* remote (non-local) repositories.

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```



# Git Graphs: Clone {.nostretch auto-animate="true"}

Git can *clone* remote (non-local) repositories.

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```



## Git CLone
The [clone](https://git-scm.com/docs/git-clone) command downloads a remote repository (and all its branches).

```bash
# Use http to download a repo
git clone https://github.com/opensourcecourse/git_repo

# Use ssh
git clone https://github.com/opensourcecourse/git_repo

# See all branches
git branch -a
```



# Git Graphs: Fetch {.nostretch auto-animate="true"}

Git can also *fetch* new branches since clone.

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```



# Git Graphs: Fetch {.nostretch auto-animate="true"}

Git can also *fetch* new branches since clone.

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```



## Git Fetch
Git fetch gets specific info from a remote repo (like a small clone).

```bash
# fetch branch
git fetch branch_1
git checkout branch_1

# fetch all branches not on local
git fetch --all

# fetch tags
git fetch --tags
```



## Git Fetch
Note: After cloning it may appear not all branches were downloaded. Just make sure to use
the -a flag on branch to see them. All you need to do is checkout one of the remote branches
to make a it a local one.

```bash
# list all branches (note the origin/branch_1)
git branch -a

# checkout branch, making a local copy in process
git checkout branch_1
```



# Git Graphs: Push {.nostretch auto-animate="true"}

We *push* local changes to the remote repo.

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```



## Git Push
The [push](https://git-scm.com/docs/git-push) command shares local commits/branches with a remote repo. If the local
and remote history have diverged you may have to force the push. Careful though, make sure no one else depends on that
history!

```bash
# Push new commits on main to origin's main branch
Git push origin main

# Push a new branch to origin
git push origin branch_1

# Force push a rebased branch
git push origin branch_2 --force
```






# Git Graphs: Push {.nostretch auto-animate="true"}

We *push* local changes to the remote repo.

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```



# Git Graphs: Pull {.nostretch auto-animate="true"}

We *pull* changes from remote to local (fetch + merge).

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```


## Git Pull

The [pull](https://git-scm.com/docs/git-pull) command is used to fetch and merge changes from a remote repo
into your current branch.

```bash
# Update main branch with commits from remote main
git pull origin main
```


# Git Graphs: Pull {.nostretch auto-animate="true"}

We *pull* changes from remote to local (fetch + merge).

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```



# Git Graphs: Fork {.nostretch auto-animate="true"}

*fork* creates remote clones.

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```


## Git Fork

There is no fork command. [Forking](https://docs.github.com/en/get-started/quickstart/fork-a-repo)
 done from Github's web interface.



# Git Graphs: Fork {.nostretch auto-animate="true"}

*fork* creates remote clones.

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch develop
   commit id: "dc12a2"
   commit id: "ca2259"
   commit id: "5dab5d"
```



# Other Useful Git Commands

::: {.incremental}

::: {.center_midsized}
* checkout - Move HEAD to different location (commit or branch)
* log - Display info about previous commits
* status - Show local state (current branch) and unsaved changes
* show - Show info about a git object
* stash - Save changes outside of a commit
:::

:::



# Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (1)

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
```



# Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (1)

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch develop
```



# Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (2)

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
```



# Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (2)

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
```



# Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (3)

:::{.centered_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   branch develop
   commit id: "34ad12"
```



# Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (3)

:::{.centered_midsized}
local
:::

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
```

:::{.centered_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   branch develop
   commit id: "34ad12"
```



# Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (4)

:::{.centered_midsized}
local
:::

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
```

:::{.centered_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
```



# Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (4)

:::{.centered_midsized}
local
:::

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
```

:::{.centered_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
```



# Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (5)

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   branch develop
   commit id: "4c0f818"
   checkout main
   commit id: "14359ab"
   commit id: "a2b55ce"
```



# Knowledge Check {.nostretch auto-animate="true"}

Name that Git Command (5)

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "14359ab"
   commit id: "a2b55ce"
   branch develop
   commit id: "4c0f818"
```



# Common Workflow {.nostretch auto-animate="true"}

*fork* a repo

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```



# Common Workflow {.nostretch auto-animate="true"}

*fork* a repo

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```



# Common Workflow {.nostretch auto-animate="true"}

*clone* the fork

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```



# Common Workflow {.nostretch auto-animate="true"}

*clone* the fork

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```



# Common Workflow {.nostretch auto-animate="true"}

*branch* to create a new feature

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```



# Common Workflow {.nostretch auto-animate="true"}

*branch* to create a new feature

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
```


# Common Workflow {.nostretch auto-animate="true"}

Write some code, *add*, *commit*

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
```



# Common Workflow {.nostretch auto-animate="true"}

Write some code, *add*, *commit*

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
   commit id: "a342bc"
   commit id: "adeb12"
```



# Common Workflow {.nostretch auto-animate="true"}

*push* new code to fork

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
   commit id: "a342bc"
   commit id: "adeb12"
```

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```



# Common Workflow {.nostretch auto-animate="true"}

*push* new code to fork

::: {.center_midsized}
local
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
   commit id: "a342bc"
   commit id: "adeb12"
```

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
   commit id: "a342bc"
   commit id: "adeb12"
```



# Common Workflow {auto-animate="true"}

Submit a *pull request* to add changes to origin/main.

[Get it approved!]{.fragment}

::: {.r-stack}

:::{.fragment}
![](images/yes.png){height="450"}
:::

:::



# Common Workflow {.nostretch auto-animate="true"}

*squash* commits on branch

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
   commit id: "a342bc"
   commit id: "adeb12"
```



# Common Workflow {.nostretch auto-animate="true"}

*squash* commits on branch

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
   commit id: "ba34dc"
```



# Common Workflow {.nostretch auto-animate="true"}

*merge* remote/new_feature into origin/main

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
   commit id: "ba34dc"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 5
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```


# Common Workflow {.nostretch auto-animate="true"}

*merge* remote/new_feature into origin/main

::: {.center_midsized}
remote: fork
:::

```{mermaid}
%%| fig-width: 7
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   branch new_feature
   commit id: "ba34dc"
```

::: {.center_midsized}
remote: origin
:::

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
   commit id: "ba34dc"
```

# Git Ignore

Git can ignore certain files, or patterns, with a single file called ".gitignore".


```text
# pycharm
.idea

# Ipython stuff
.ipynb_checkpoints

# linux/osx garbage
*~
*.swp
```

# Branching Strategies: Versioning

- Most projects use [SemVer](https://semver.org/)

```markdown
# MAJOR.MINOR.PATCH
e.g, 1.2.3
```

- [CalVer](https://calver.org/) is also becoming popular

```markdown
# YYYY.MINOR.MICRO (Unity)
# YY.MINOR.MICRO (pip)
# YY.MM (Ubuntu)
# YY.MINOR.MICRO (boltons)
```


# Branching Strategies

:::{.incremental}

::: {.center_midsized}
- Main only
- Single Trunk
- Double Trunk
:::

:::



# Branching: Main Only

::: {.center_midsized}
- Working by yourself
- You only need checkpoints not branches
- Easiest strategy
:::

<br>

```{mermaid}
%%| fig-width: 6
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a"
   commit id: "4c0f818"
   commit id: "221d22"
```



# Branching: Single Trunk

:::{r-stack}

::: {.fragment}

::: {.center_midsized}
- Features and Bug fixes in separate branches
- All branches merge back to main
- Version bump depends on recent commits
- Main is always *deployable*
:::

:::

:::{.fragment}
```{mermaid}
%%| fig-width: 10
gitGraph
   commit id: "9d6b7c"
   commit id: "046a7a" tag: "v1.0.1"
   branch bug_fix_1
   commit id: "6bc3a3"
   commit id: "f23da3"
   checkout main
   branch feature_1
   commit id: "4c0f818"
   commit id: "221d22"
   commit id: "ac1d25"
   checkout main
   merge bug_fix_1 tag: "v1.0.2"
   merge feature_1 tag: "v1.1.0"
```
:::

:::



# Branching: Double Trunk

:::{r-stack}

::: {.center_midsized}
- Features and Bug fixes in separate branches
- Features merge to *develop*, bug fixes to *main*
- Bug fix releases are done on main
- Develop is merged into main for feature releases
- Main is merged into develop
:::

:::



# Branching: Double Trunk

<br>
```{mermaid}
%%| fig-width: 10
gitGraph
   commit id: "ab3490"
   branch develop
   commit id: "ac231c"
   commit id: "0931dc"

   checkout main
   commit id: "046a7a" tag: "v1.0.0"
   branch bug_fix_1
   commit id: "6bc3a3"
   commit id: "f23da3"
   checkout main
   merge bug_fix_1 tag: "v1.0.1"
   checkout develop
   branch feature_1
   commit id: "4c0f818"
   commit id: "221d22"
   checkout develop
   merge feature_1
   checkout main
   merge develop tag: "v1.1.0"
```

# Summary: the Tools

::: {.incremental}

::: {.center_midsized}
* add - Stage changes
* commit - Save changes (with metadata)
* clone - Download remote repo
* checkout - Move HEAD to specific branch/commit
* branch - Create new branch
* merge - Merge branches
* pull - Get changes from remote
* fetch - Get branch/tags from remote
* push - Push changes to remote
:::

:::
