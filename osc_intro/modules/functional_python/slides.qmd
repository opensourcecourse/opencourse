---
title: "Functional Python"
subtitle: Functionally Educational
format:
    revealjs:
        slide-number: true
        preview-links: auto
        theme: [../../../custom_slides.scss]
        css: ../../../slides.css
        navigation-mode: vertical
        controls-layout: bottom-right
        controls-tutorial: true

footer: \
    <a href="https://opensourcecourse.dev/osc_intro/modules/functional_python/overview.html">overview</a> /\
    <a href="https://github.com/opensourcecourse/opencourse/blob/main/osc_intro/modules/functional_python/slides.qmd">source</a> /\
    <a href="https://opensourcecourse.dev/osc_intro/modules/functional_python/exercises.html">exercises</a>
---

# Programming Paradigms


:::: {.columns}

::: {.column width="50%"}


:::{.fragment}

- [Procedural](https://en.wikipedia.org/wiki/Imperative_programming)
  - Programs define operations to perform
  - Close to the hardware

:::


:::

::: {.column width="50%"}

:::{.fragment}

- [Object-Oriented](https://en.wikipedia.org/wiki/Object-oriented_programming)
  - State and behavior encapsulated in *objects*
  - Intuitive design for many systems

:::


:::

::::



:::{.fragment}

- [Functional](https://en.wikipedia.org/wiki/Functional_programming)
  - Programming abstractions behave mathematically 
  - Good for data processing, parallel computing, science
  
:::



# Functional Concepts

:::{.incremental}
- Pure functions, immutability, side effects
- Scope, higher order functions (decorators)
- Anonymous functions
- Map, reduce
- Recursion
- *Generators
- *Context managers
:::

:::{.footer}
*Not particularly functional but no other place to cover these topics
:::


# Functional Purity {auto-animate="true"}

Define three vector functions

:::{.fragment}

$$
f(a, \vec{x}, \vec{y}) = a \vec{x} + \vec{y}
$$

:::

:::{.fragment}

$$
g(\vec{x}, \vec{y}) = \vec{x} \oslash \vec{y}
$$

:::

:::{.fragment}

$$
h(a, \vec{x}) = \vec{x}^{\circ a}
$$

:::



# Functional Purity {auto-animate="true"}

Does the meaning change with order?

$$
f(a, \vec{x}, \vec{y}) = a \vec{x} + \vec{y}
$$

$$
g(\vec{x}, \vec{y}) = \vec{x} \oslash \vec{y}
$$

$$
h(a, \vec{x}) = \vec{x}^{\circ a}
$$



# Functional Purity {auto-animate="true"}

Does the meaning change with order?

$$
g(\vec{x}, \vec{y}) = \vec{x} \oslash \vec{y}
$$

$$
h(a, \vec{x}) = \vec{x}^{\circ a}
$$

$$
f(a, \vec{x}, \vec{y}) = a \vec{x} + \vec{y}
$$


# Functional Purity {auto-animate="true"}

Does the meaning change with order?

$$
h(a, \vec{x}) = \vec{x}^{\circ a}
$$

$$
f(a, \vec{x}, \vec{y}) = a \vec{x} + \vec{y}
$$

$$
g(\vec{x}, \vec{y}) = \vec{x} \oslash \vec{y}
$$



# Functional Purity {auto-animate="true"}

Does the meaning change with order?

$$
h(a, \vec{x}) = \vec{x}^{\circ a}
$$

$$
g(\vec{x}, \vec{y}) = \vec{x} \oslash \vec{y}
$$

$$
f(a, \vec{x}, \vec{y}) = a \vec{x} + \vec{y}
$$


# Functional Purity {auto-animate="true"}

<br>

```{.python filename="functions"}
def func_f(a, x, y):
    ...

def func_g(x, y):
    ...

def func_h(a, x):
    ...
```


# Functional Purity {auto-animate="true"}

<br>

```{.python filename="inputs"}
import numpy as np

x = np.random.random(10)
y = np.ones_like(x)
a = 12
```


# Functional Purity {auto-animate="true"}

<br>

```{.python filename="Order"}
f_1 = func_f(a, x, y)
g_1 = func_g(x, y)
h_1 = func_h(a, x)

h_2 = func_h(a, x)
g_2 = func_g(x, y)
f_2 = func_f(a, x, y)
```

:::{.fragment}

Do $f_1$ = $f_2$, $g_1$ = $g_2$, $h_1$ = $h_2$ ? 

:::

:::{.fragment}

It depends on [functional purity]{.red-bold} 

:::



# Functional Purity {auto-animate="true"}


```{.python filename="pure functions"}
def func_f(a, x, y):
    out = a * x + y
    return out

def func_g(x, y):
    out = x / y
    return out

def func_h(a, x):
    out = x ** a
    return out
```


# Functional Purity {auto-animate="true"}


```{.python filename="impure functions"}
def func_f(a, x, y):
    x[:] = a * x + y
    return x

def func_g(x, y):
    x[:] = x / y
    return x

def func_h(a, x):
    x[:] = x ** a
    return x
```


# Functional Purity {auto-animate="true"}

:::{.incremental}

- Both pure and impure functions can be **correct**
- Pure functions: 
  - Behave in a mathematically predictable way
  - Have outputs which depend exclusively on inputs
  - Dont cause [side effects]{.red-bold}
  - Are [Referentially transparent](https://en.wikipedia.org/wiki/Referential_transparency)
  - Are much easier to parallelize
  - Restrictive

:::


# Knowledge Check

Which of these functions are pure?

```{.python code-line-numbers="1||1-4|6-7|9-12"}
global_state = {'value': 1}

def add1(a):
    return a + global_state['value']

def add2(a):
    return a + 1
    
def add3(a):
    out = a + 1
    print(out)
    return out
```



# Knowledge Check

Which of these functions are pure?

```{.python code-line-numbers="1||1-5|7-10"}
def simple_range(up_to):
    out = []
    for a in range(up_to):
        out.append(a)
    return out

def other_defaults(arg1=1, some_list=[1,2,3]):
    out = []
    for val in some_list:
        out.append(arg1 + val)
```




# Immutability

<br>

```{.python code-line-numbers="1||1-2|4|5"}
list_1 = [1, 2, 3]
tuple_1 = (1, 2, 3)

list_1[0] = 0
tuple_1[0] = 0
```

<br>

:::{.incremental}
- Why does python have a tuple? Isn't a list better? 
- Why would we limit ourselves as developers?
:::



# Immutability

:::{.r-stack}

![](images/tangled_cat.png)

:::

# Immutability

<br>

:::{.callout-note appearance="minimal"}
All race conditions, deadlock conditions, and concurrent update problems are due to mutable variables.

\- Robert C. Martin
:::

  

# Can We Mix OO and Functional Benefits?


```{.python code-line-numbers="1||1-3|5-7|9|11-13"}
def double(instance):
    doubled_state = instance.state * 2
    return instance.__class__(doubled_state)

class Class1:
    def __init__(self, state):
        self.state = state

    double = double
  
instance = Class1(1)
double_instance_1 = self.double()
double_instance_2 = double(instance)
```


# Immutable Data Containers

<br>

```python
from dataclasses import dataclass

@dataclass(frozen=True)
class MyImmutableData:
    value_1: float
    value_2: float = 2.0

data = MyImmutableData(10.0)
data.value_2 = 2  # FrozenInstanceError
```


# Handling Mutable State 

Safe behavior by default, opt into unsafe behavior

<br>

```{.python code-line-numbers="1||1-3|5|7"}
import pandas as pd

df = pd.read_csv('my_csv.csv')

safe = df.sort_values()

not_safe = df.sort_values(in_place=True)
```



# Handling Mutable State 

Mark mutable attributes


```{.python code-line-numbers="1||7|9-10"}
from sklearn.cluster import KMeans
import numpy as np

X = np.array([[1, 2], [1, 4], [1, 0],
             [10, 2], [10, 4], [10, 0]])
             
kmeans = KMeans(n_clusters=2).fit(X)

kmeans.labels_
kmeans.cluster_centers_
```



# Immutability

<br>

:::{.incremental}
- Objects cannot change once created
- Mutation side effects are eliminated
- Memory location no longer matters (for correctness)
- New objects are created by functions
- Immutable built-ins: tuple, str, frozenset
- Bottom line: avoid modifying data in-place when possible
:::



## Immutability Purity in the Wild

<br>

:::{.incremental}

- [jax](https://github.com/google/jax)
- [pyrsistent](https://github.com/tobgu/pyrsistent)
- [static-frame](https://github.com/static-frame/static-frame)
- [Apache Arrow](https://arrow.apache.org/)
- [Polars](https://www.pola.rs/)

:::



# Functions as Parameters

<br>

Functions are "first class citizens" 

:::{.fragment}

```python
def func1():
    print('func1 called')

def func2(func):
    return func()

func2(func1)
```

:::


# Scope

<br>

Scope: the order in which python "sees" names and values (LEGB):

:::{.incremental}

- *Local* — functions own indent level

- *Enclosing-function* — function containing functions

- *Global* (module) — top-level or module names

- *Built-in* (Python) — python names (open, list, set, ValueError, ...)
:::

::: footer
See [here](https://realpython.com/python-scope-legb-rule/) for an excellent overview of scope.
:::



# Scope{auto-animate="true"}

```python
arg = 0

def func_1():
    arg = 1
    
    def func_2():
        arg = 2
        return arg
    
    return func_2()

func_1()
```

:::{.fragment}
returns: 2
:::



# Scope{auto-animate="true"}

```python
arg = 0

def func_1():
    arg = 1
    
    def func_2():
        return arg
    
    return func_2()

func_1()
```

:::{.fragment}
returns: 1
:::



# Scope{auto-animate="true"}

```python
arg = 0

def func_1():
    
    def func_2():
        return arg
    
    return func_2()

func_1()
```

:::{.fragment}
returns: 0
:::


# Scope{auto-animate="true"}

```python
arg = 1

def func1():
    return arg

def func2(func):
    arg = 2
    return func()

func2(func1)
```
:::{.fragment}
returns 1,  Why!?
:::



# Scope{auto-animate="true"}

```python
arg = 0

def func_1():
    arg = 1
    
    def func_2():
        global arg
        return arg
    
    return func_2()

func_1()
```

:::{.fragment}
returns 0, why?
:::



# Scope{auto-animate="true"}

```python
arg = 0

def func_1():
    arg = 1
    
    def func_2():
        nonlocal arg
        return arg
    
    return func_2()

func_1()
```

:::{.fragment}
returns 1, why?
:::


:::{.fragment}
The function *definition* determines scope, not its use.
:::



## Scope{auto-animate="true"}

<br>

:::{.callout-note}
most of the time, using `global` or `nonlocal` is not a good idea.
:::



# Decorators (finally){auto-animate="true"}
Decorators are a function that take other functions as inputs.

```{.python code-line-numbers="1||1-6|2-5|8-9|11-12"}
def decorator(func):
    def wrapper(arg1, arg2):
        new_arg1 = arg1 + 1
        new_arg2 = arg2 + 1
        return func(new_arg1, new_arg2)
    return wrapper

def add(arg1, arg2):
    return arg1 + arg2

add = decorator(add)
print(add(1, 1))
```



# Decorators {auto-animate="true"}
@ is used as syntactic sugar.

```python
def decorator(func):
    def wrapper(arg1, arg2):
        new_arg1 = arg1 + 1
        new_arg2 = arg2 + 1
        return func(new_arg1, new_arg2)
    return wrapper

@decorator
def add(arg1, arg2):
    return arg1 + arg2

add(1, 1)
```



# Decorators {auto-animate="true"}
Decorators don't need to replace the old function

```python
registry = []

def decorator(func):
    registry.append(func)
    return func

@decorator
def add(arg1, arg2):
    return arg1 + arg2

print(add(1, 1), len(registry))
```



# Decorators {auto-animate="true"}
Use `wrap` to transfer metedata to new function.

```python
from functools import wraps

def decorator(func):
    @wraps(func)
    def _wrapper(arg1, arg2):
        new_arg1 = arg1 + 1
        new_arg2 = arg2 + 1
        return func(new_arg1, new_arg2)
    return _wrapper
```


# Decorators {auto-animate="true"}
\*args and \*\*kwargs allow any inputs

```python
from functools import wraps

def decorator(func):
    @wraps(func)
    def _wrapper(*args, **kwargs):
        ...
        return func(*args, **kwargs)
    return _wrapper
```


## What are \*args and \*\* kwargs? 

\*args is used to unpack positional arguments into a tuple
and \*\*kwargs unpacks keyword arguments into a dict.

For example:

```{.python }
def args_demo(*args):
    return args

out = args_demo(1, 2, 3, 4)
# out is a tuple (1, 2, 3, 4)
```


## What are \*args and \*\* kwargs? 

<br>

```{.python }
def kwargs_demo(**kwargs):
    return kwargs

out = kwargs_demo(one=1, two=2)
# out is a dict {"one": 1, "two": 2}
```


# Decorators in the Wild

<br>

functools cache

```python
from functools import cache

@cache
def fibonacci(n):
   if n <= 1:
       return n
   fib1 = fibonacci(n-1)
   fib2 = fibonacci(n-2)
   return fib1 + fib2
```



# Decorators in the Wild

<br>

functools partial

```{python}
#| echo: true
from functools import partial

def add(a, b):
    return a + b

partial_add = partial(add, b=2)

print(partial_add(1))
```



# Decorators in the Wild

<br>

Pytest

```python
import pytest

@pytest.fixture()
def setup_data():
    return [1, 2, 3]

def test_data(setup_data):
    assert len(setup_data)
```



# Decorators in the Wild

<br>

Flask

```python
from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello, World!'
```



# Decorators Summary

<br>
Decorators:

:::{.incremental}
- Are functions which take other functions as inputs
- Can use the @ as shorthand for `decorator(func)`
- May return a new function (appears to modify original)
- Often used to mark or register a callable 
:::



# Anonymous Functions

:::{.r-stack}
![](https://ih1.redbubble.net/image.789708875.3643/poster,504x498,f8f8f8-pad,600x600,f8f8f8.u4.jpg)
:::



# Anonymous Functions

<br>
Functions with no name

```{.python code-line-numbers="1||6"}
my_list = [1, 3, 2]
other_map = {1: 10, 2: 0, 3: 99}

sort_list = sorted(
    my_list, 
    key=lambda x: other_map[x]
)
```



# Anonymous Functions

<br>

Lambda def equivalence

```python
# never give a lambda a name
func1 = lambda x, y, z: x + y + z

# use a def instead
def func1(x, y, z):
    return x + y + z 
```



# Map

<br>

Apply a function to each element of a sequence

```{.python}
my_range = range(10)

# square the list
out = map(lambda x: x*x, my_range)
```

<br>

:::{.fragment}

```{.python}
out = (x*x for x in range(10))
```

:::


# Map

<br>

```python
from itertools import repeat
from random import randrange

arr_1 = map(randrange, repeat(10, 10))
```
<br>

:::{.fragment}
```python
from random import randrange

arr_1 = [randrange(10) for _ in range(10)]
```
:::


:::{.footer}
This is from Gwen's style homework.
:::


# Reduce


Apply a function to first two elements, then the result to the third, etc.


```{.python}
from functools import reduce
my_range = range(1, 6)

# square the list
out = reduce(lambda x,y: x*y, my_range)
```

::: footer
Haskel calls reduce "fold" which is a more descriptive name.
See [Real Python's article](https://realpython.com/python-reduce-function/) for more on reduce.
:::




# Accumulate

Like reduce, but intermediate values are stored (e.g., cumulative max)

<br>

```python

from itertools import accumulate
from random import randrange

rand_ints = (randrange(1000) for _ in range(10))
result = accumulate(rand_ints, max)
```



# Recursion

<br>
When a function calls into itself. Has a base case and at least one recursive case.


```{.python code-line-numbers="1||3|4,5"}
def fibonacci(n):
   if n <= 1:
       return n
   fib1 = fibonacci(n-1)
   fib2 = fibonacci(n-2)
   return fib1 + fib2
```



# Recursion

<br>

Recursion:

:::{.incremental}
- Works well for parsing recursive data structures (e.g., trees)
- Easy to overflow the stack
- Can be difficult to understand, should be used sparingly
- Good for showing off, coding interviews
:::



# Generators

<br>

:::{.incremental}
- A function which suspends and resumes state
- Useful for memory conservation (large or infinite lists)
- Capable of two-way communication (premise of python async)
- Implements the **Iterable** and **Iterators** protocol
:::



# Generators {auto-animate="true"}


```{.python code-line-numbers="1||1-5|7|9-10|12-14"}
def generator():
    val = 0
    while True:
        val += 1
        yield val

iterable_thing = generator()

# no get_item
iterable_thing[0]  # raise TypeError

# but it is *iterable*
for val in iterable_thing:  
    print(val)
```


# Generators {auto-animate="true"}

<br>

```{.python code-line-numbers="1||8|9-11"}
def generator():
    val = 0
    while True:
        val += 1
        yield val

# Also iterator
iterator = generator()
val1 = next(iterator)  # 1
val2 = next(iterator)  # 2
val3 = next(iterator)  # 3
# raises StopIteration when exhausted
```



# Yield From {auto-animate="true"}

<br>

```{.python code-line-numbers="1||1-2|4|6|8|10"}
def generator_0(iterable):
    yield iterable

input_list = [1, 2, 3]

one_el = next(generator_0(input_list))

total = [x for x in generator_0(input_list)]

listout = list(generator(input_list)
```


# Yield From {auto-animate="true"}

<br>

```{.python code-line-numbers="1||1-3|5|7|9|11"}
def generator_1(iterable):
    for a in iterable:
        yield a

input_list = [1, 2, 3]

one_el = next(generator_1(input_list))

total = [x for x in generator_1(input_list)]

listout = list(generator(input_list)
```


# Yield From {auto-animate="true"}

yield from *drives* iteration

<br>

```{.python}
def generator_1(iterable):
    for a in iterable:
        yield a

def generator_2(iterable):
    yield from iterable
```




# Coroutines {auto-animate="true"}


```{.python code-line-numbers="1||1-3|5-6|7-11|12"}
def generator(value):
    while True:
        value += yield value

# Iterator
iterable = generator(0)

first = next(iterable)
out1 = iterable.send(10)
out2 = iterable.send(5)
out3 = iterable.send(2)
print(first, out1, out2, out3)
```

:::{.fragment}

```{python}
#| echo: false
def generator(value):
    while True:
        value += yield value

# Iterator
iterable = generator(0)

first = next(iterable)

out1 = iterable.send(10)
out2 = iterable.send(5)
out3 = iterable.send(2)
print(first , out1, out2, out3)
```

:::



# Generators

Generators are **everywhere** in python!

<br>

```python
my_dict = {1: 1, 2: 2}
items = my_dict.items()  

generator_comp = (x for x in range(10))
```


# Context Mangers

<br>

:::{.incremental}
- Uses the `with` keyword
- Useful to manage setup/teardown for different contexts
:::

<br>

:::{.fragment}

```{.python}
with open('some_file.txt', 'w') as fi:
    fi.write('my txt')
...
```

:::


# Context Mangers

```{.python code-line-numbers="1||1-4|5|6,9|7|9-10"}
from contextlib import contextmanager

@contextmanager
def my_open(filename, mode):
    fi = open(filename, mode)
    yield fi
    fi.close()

with my_open('test_file.txt', 'w') as fi:
    fi.write('my txt')
...
```


## Context Mangers

Class context managers are more powerful

```{.python code-line-numbers="1||1-4|5|6|7|9-10"}

class MyOpen:
    def __init__(self, path, mode):
        self._path = path
        self._mode = mode
        self._fi = None
        
    def __enter__(self):
        self._fi = open(self._path)
        return self._fi
        
    def __exit__(self, exc_type, exc_value, exc_tb):
        self._fi.close()

with MyOpen('test_file.txt', 'w') as fi:
    fi.write('my txt')
...
```

:::footer
More on context managers [here](https://realpython.com/python-with-statement/)
:::

# Summary

:::{.incremental}
- Pure function and unchangeable data are advantageous
- Avoid shared mutable state (when possible)
- Functions can be passed to functions
- Decorators mark or modify a callable
- Recursion is cool, but not usually the simplest approach
- Generators suspend function state
- Context managers are a clean way to handle setup/teardown
:::

